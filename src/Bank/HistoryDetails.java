/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bank;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author USER
 */
public class HistoryDetails extends javax.swing.JFrame {

    private Account user; // Account object representing the current user

    /**
     * Creates new form HistoryDetails
     */
    public HistoryDetails() {
        setTitle("Transaction History Details");
        initComponents();
    }

    public HistoryDetails(Account user, String transactionID, String amount) {
        setTitle("Transaction History Details");
        this.user = user;
        initComponents();
        Wand.setCustomIcon(this);   // Set custom icon for the window
        Wand.setCustomCursor(this);  // Set custom cursor for the window 
        displayUserHistory(transactionID, amount); // Display user history details
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_transactionDetails = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        totalamountpaid = new javax.swing.JLabel();
        transfertypes = new javax.swing.JLabel();
        currency = new javax.swing.JLabel();
        to = new javax.swing.JLabel();
        timestamp = new javax.swing.JLabel();
        from = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        transactionid = new javax.swing.JLabel();
        lbl_totalamountpaid = new javax.swing.JLabel();
        lbl_currency = new javax.swing.JLabel();
        lbl_transfertypes = new javax.swing.JLabel();
        lbl_transactionid = new javax.swing.JLabel();
        lbl_status = new javax.swing.JLabel();
        lbl_timestamp = new javax.swing.JLabel();
        lbl_to = new javax.swing.JLabel();
        lbl_from = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(null);

        lbl_transactionDetails.setFont(new java.awt.Font("Calibri", 1, 45)); // NOI18N
        lbl_transactionDetails.setForeground(new java.awt.Color(255, 255, 255));
        lbl_transactionDetails.setText("Transaction Details");
        getContentPane().add(lbl_transactionDetails);
        lbl_transactionDetails.setBounds(40, 30, 440, 60);

        panel.setBackground(new java.awt.Color(0, 0, 0, 80));
        panel.setLayout(null);

        totalamountpaid.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        totalamountpaid.setForeground(new java.awt.Color(255, 255, 255));
        totalamountpaid.setText("Total Amount");
        panel.add(totalamountpaid);
        totalamountpaid.setBounds(20, 30, 179, 30);

        transfertypes.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        transfertypes.setForeground(new java.awt.Color(255, 255, 255));
        transfertypes.setText("Categorical Types");
        panel.add(transfertypes);
        transfertypes.setBounds(20, 120, 179, 30);

        currency.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        currency.setForeground(new java.awt.Color(255, 255, 255));
        currency.setText("Currency Used");
        panel.add(currency);
        currency.setBounds(20, 80, 179, 28);

        to.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        to.setForeground(new java.awt.Color(255, 255, 255));
        to.setText("To");
        panel.add(to);
        to.setBounds(20, 210, 179, 30);

        timestamp.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        timestamp.setForeground(new java.awt.Color(255, 255, 255));
        timestamp.setText("Date/ Time");
        panel.add(timestamp);
        timestamp.setBounds(20, 250, 179, 30);

        from.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        from.setForeground(new java.awt.Color(255, 255, 255));
        from.setText("From");
        panel.add(from);
        from.setBounds(20, 170, 179, 28);

        status.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        status.setForeground(new java.awt.Color(255, 255, 255));
        status.setText("Status");
        panel.add(status);
        status.setBounds(20, 300, 179, 28);

        transactionid.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        transactionid.setForeground(new java.awt.Color(255, 255, 255));
        transactionid.setText("Transaction ID");
        panel.add(transactionid);
        transactionid.setBounds(20, 350, 179, 28);

        lbl_totalamountpaid.setBackground(new java.awt.Color(0, 0, 0));
        lbl_totalamountpaid.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_totalamountpaid.setForeground(new java.awt.Color(255, 255, 255));
        lbl_totalamountpaid.setText("amount");
        panel.add(lbl_totalamountpaid);
        lbl_totalamountpaid.setBounds(240, 30, 213, 30);

        lbl_currency.setBackground(new java.awt.Color(0, 0, 0));
        lbl_currency.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_currency.setForeground(new java.awt.Color(255, 255, 255));
        lbl_currency.setText("currency");
        panel.add(lbl_currency);
        lbl_currency.setBounds(240, 80, 213, 30);

        lbl_transfertypes.setBackground(new java.awt.Color(0, 0, 0));
        lbl_transfertypes.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_transfertypes.setForeground(new java.awt.Color(255, 255, 255));
        lbl_transfertypes.setText("categorical");
        panel.add(lbl_transfertypes);
        lbl_transfertypes.setBounds(240, 120, 213, 30);

        lbl_transactionid.setBackground(new java.awt.Color(0, 0, 0));
        lbl_transactionid.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_transactionid.setForeground(new java.awt.Color(255, 255, 255));
        lbl_transactionid.setText("id");
        panel.add(lbl_transactionid);
        lbl_transactionid.setBounds(240, 350, 213, 30);

        lbl_status.setBackground(new java.awt.Color(0, 0, 0));
        lbl_status.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_status.setForeground(new java.awt.Color(102, 255, 102));
        lbl_status.setText("status");
        panel.add(lbl_status);
        lbl_status.setBounds(240, 300, 213, 30);

        lbl_timestamp.setBackground(new java.awt.Color(0, 0, 0));
        lbl_timestamp.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_timestamp.setForeground(new java.awt.Color(255, 255, 255));
        lbl_timestamp.setText("time");
        panel.add(lbl_timestamp);
        lbl_timestamp.setBounds(240, 250, 250, 30);

        lbl_to.setBackground(new java.awt.Color(0, 0, 0));
        lbl_to.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_to.setForeground(new java.awt.Color(255, 255, 255));
        lbl_to.setText("to");
        panel.add(lbl_to);
        lbl_to.setBounds(240, 210, 213, 30);

        lbl_from.setBackground(new java.awt.Color(0, 0, 0));
        lbl_from.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        lbl_from.setForeground(new java.awt.Color(255, 255, 255));
        lbl_from.setText("from");
        panel.add(lbl_from);
        lbl_from.setBounds(240, 170, 213, 30);

        getContentPane().add(panel);
        panel.setBounds(50, 90, 490, 410);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/historydetails.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 600, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Displays the details of a user's transaction history based on the
     * provided transaction ID.
     *
     * @param transactionID The ID of the transaction for which the details are
     * being displayed
     */
    private void displayUserHistory(String transactionID, String amount) {
        try {
            // Establish a new connection to the MySQL database
            Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
            PreparedStatement statement;
            ResultSet resultSet;

            // Determine if the transaction is an exchange transaction or a transfer transaction
            if (transactionID.startsWith("EX")) {
                // Prepare a SQL statement to fetch details of the exchange transaction
                statement = connection.prepareStatement(
                        "SELECT TransactionID, UserID, SourceCurrency, TargetCurrency, AmountConverted, TotalAmountPaid, Timestamp "
                        + "FROM exchangetransaction WHERE TransactionID = ?"
                );
                statement.setString(1, transactionID);
                resultSet = statement.executeQuery();

                // Process the result set for exchange transaction
                if (resultSet.next()) {
                    // Retrieve the transaction details from the result set
                    String transactionid = resultSet.getString("TransactionID");
                    String userID = resultSet.getString("UserID");
                    String sourceCurrency = resultSet.getString("SourceCurrency");
                    String targetCurrency = resultSet.getString("TargetCurrency");
                    String amountConverted = resultSet.getString("AmountConverted");
                    String totalAmountPaid = resultSet.getString("TotalAmountPaid");
                    String timestamp = resultSet.getString("Timestamp");

                    // Query the ACCOUNT table to fetch usernames
                    PreparedStatement fromAccountStatement = connection.prepareStatement("SELECT Username FROM ACCOUNT WHERE UserID = ?");
                    fromAccountStatement.setString(1, userID);
                    ResultSet fromAccountResultSet = fromAccountStatement.executeQuery();
                    String fromUsername = fromAccountResultSet.next() ? fromAccountResultSet.getString("Username") : "Unknown";

                    PreparedStatement toAccountStatement = connection.prepareStatement("SELECT Username FROM ACCOUNT WHERE UserID = ?");
                    toAccountStatement.setString(1, userID);
                    ResultSet toAccountResultSet = toAccountStatement.executeQuery();
                    String toUsername = toAccountResultSet.next() ? toAccountResultSet.getString("Username") : "Unknown";

                    // Update the labels based on the transaction details
                    if (amount.contains("-")) {
                        lbl_totalamountpaid.setText(amount);
                        lbl_currency.setText(sourceCurrency);
                        lbl_transfertypes.setText("Exchange Currency");
                        lbl_from.setText(fromUsername);
                        lbl_to.setText(toUsername);
                        lbl_timestamp.setText(timestamp);
                        lbl_status.setText("Successful");
                        lbl_transactionid.setText(transactionid);
                    } else if (amount.contains("+")) {
                        lbl_totalamountpaid.setText(amount);
                        lbl_currency.setText(targetCurrency);
                        lbl_transfertypes.setText("Exchange Currency");
                        lbl_from.setText(fromUsername);
                        lbl_to.setText(toUsername);
                        lbl_timestamp.setText(timestamp);
                        lbl_status.setText("Successful");
                        lbl_transactionid.setText(transactionid);
                    } else {
                        System.out.println("Error");
                    }

                }

            } else {
                // Prepare a SQL statement to fetch details of the transfer transaction
                statement = connection.prepareStatement("SELECT TransactionID, FromAccount, ToAccount, Amount, Currency, TransferTypes, Timestamp FROM transfertransaction WHERE TransactionID = ?");
                statement.setString(1, transactionID);
                resultSet = statement.executeQuery();

                // If the result set contains data, process the transfer transaction details
                if (resultSet.next()) {
                    String transactionid = resultSet.getString("TransactionID");
                    String fromAccountID = resultSet.getString("FromAccount");
                    String toAccountID = resultSet.getString("ToAccount");
                    String amountPaid = resultSet.getString("Amount");
                    String currency = resultSet.getString("Currency");
                    String transferTypes = resultSet.getString("TransferTypes");
                    String timestamp = resultSet.getString("Timestamp");

                    // Query the ACCOUNT table to fetch usernames
                    PreparedStatement fromAccountStatement = connection.prepareStatement("SELECT Username FROM ACCOUNT WHERE UserID = ?");
                    fromAccountStatement.setString(1, fromAccountID);
                    ResultSet fromAccountResultSet = fromAccountStatement.executeQuery();
                    String fromUsername = fromAccountResultSet.next() ? fromAccountResultSet.getString("Username") : "Unknown";

                    PreparedStatement toAccountStatement = connection.prepareStatement("SELECT Username FROM ACCOUNT WHERE UserID = ?");
                    toAccountStatement.setString(1, toAccountID);
                    ResultSet toAccountResultSet = toAccountStatement.executeQuery();
                    String toUsername = toAccountResultSet.next() ? toAccountResultSet.getString("Username") : "Unknown";

                    // Update the labels based on the transaction details
                    lbl_totalamountpaid.setText(amount);
                    lbl_currency.setText(currency);
                    lbl_transfertypes.setText(transferTypes);
                    lbl_from.setText(fromUsername);
                    lbl_to.setText(toUsername);
                    lbl_timestamp.setText(timestamp);
                    lbl_status.setText("Successful");
                    lbl_transactionid.setText(transactionid);
                }
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle any exceptions
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoryDetails.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoryDetails.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoryDetails.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoryDetails.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HistoryDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel currency;
    private javax.swing.JLabel from;
    private javax.swing.JLabel lbl_currency;
    private javax.swing.JLabel lbl_from;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JLabel lbl_timestamp;
    private javax.swing.JLabel lbl_to;
    private javax.swing.JLabel lbl_totalamountpaid;
    private javax.swing.JLabel lbl_transactionDetails;
    private javax.swing.JLabel lbl_transactionid;
    private javax.swing.JLabel lbl_transfertypes;
    private javax.swing.JPanel panel;
    private javax.swing.JLabel status;
    private javax.swing.JLabel timestamp;
    private javax.swing.JLabel to;
    private javax.swing.JLabel totalamountpaid;
    private javax.swing.JLabel transactionid;
    private javax.swing.JLabel transfertypes;
    // End of variables declaration//GEN-END:variables
}
