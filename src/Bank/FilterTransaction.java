/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bank;

import java.io.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;

/**
 *
 * @author USER
 */
public class FilterTransaction extends javax.swing.JFrame {

    private Account user;       // User account details
    private boolean mouseListenerAdded = false;

    /**
     * Creates new form FilterTransaction
     */
    public FilterTransaction() {
        initComponents();
    }

    public FilterTransaction(Account user) {
        setTitle("Filter Transaction Page");
        this.user = user;
        initComponents();
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
        displayTransactionHistory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lbl_filtertransaction = new javax.swing.JLabel();
        FilterTransaction = new javax.swing.JTabbedPane();
        panel_day = new javax.swing.JPanel();
        lbl_daily = new javax.swing.JLabel();
        btn_daily = new javax.swing.JButton();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        paymentmethod_background1 = new javax.swing.JLabel();
        panel_Month = new javax.swing.JPanel();
        lbl_amountthreshold1 = new javax.swing.JLabel();
        btn_month = new javax.swing.JButton();
        jMonthChooser = new com.toedter.calendar.JMonthChooser();
        jYearChooser = new com.toedter.calendar.JYearChooser();
        background_month = new javax.swing.JLabel();
        panel_amounthreshold = new javax.swing.JPanel();
        jComboBox_amount = new javax.swing.JComboBox<>();
        lbl_amountthreshold = new javax.swing.JLabel();
        btn_filteramount = new javax.swing.JButton();
        backgroundamount = new javax.swing.JLabel();
        panel_paymentmethod = new javax.swing.JPanel();
        lbl_paymentmethod = new javax.swing.JLabel();
        jComboBox_payment = new javax.swing.JComboBox<>();
        btn_filtermethod = new javax.swing.JButton();
        paymentmethod_background = new javax.swing.JLabel();
        panel_categoricalTypes = new javax.swing.JPanel();
        lbl_choosecategorical = new javax.swing.JLabel();
        jComboBox_category = new javax.swing.JComboBox<>();
        btn_filtercategory = new javax.swing.JButton();
        filter_background = new javax.swing.JLabel();
        btn_done1 = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 600));
        getContentPane().setLayout(null);

        displayTransactionHistoryList.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(displayTransactionHistoryList);
        displayTransactionHistoryList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                addListMouseListener();
            }
        });

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 100, 570, 440);

        lbl_filtertransaction.setFont(new java.awt.Font("Calibri", 1, 45)); // NOI18N
        lbl_filtertransaction.setForeground(new java.awt.Color(255, 255, 255));
        lbl_filtertransaction.setText("Filter Transaction By ");
        getContentPane().add(lbl_filtertransaction);
        lbl_filtertransaction.setBounds(40, 30, 440, 60);

        FilterTransaction.setBackground(new java.awt.Color(0, 0, 0, 90));
        FilterTransaction.setForeground(new java.awt.Color(255, 255, 255));
        FilterTransaction.setToolTipText("");
        FilterTransaction.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        FilterTransaction.setInheritsPopupMenu(true);

        panel_day.setBackground(new java.awt.Color(0, 0, 0, 80));
        panel_day.setLayout(null);

        lbl_daily.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        lbl_daily.setForeground(new java.awt.Color(255, 255, 255));
        lbl_daily.setText("Please choose a date to filter");
        panel_day.add(lbl_daily);
        lbl_daily.setBounds(70, 50, 280, 32);

        btn_daily.setBackground(new java.awt.Color(196, 176, 224));
        btn_daily.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_daily.setText("Filter");
        btn_daily.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_daily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dailyActionPerformed(evt);
            }
        });
        panel_day.add(btn_daily);
        btn_daily.setBounds(320, 280, 80, 40);

        jDateChooser.setBackground(new java.awt.Color(188, 166, 205));
        jDateChooser.setDateFormatString("MMM dd, yyyy");
        jDateChooser.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        panel_day.add(jDateChooser);
        jDateChooser.setBounds(20, 100, 370, 50);
        Date today = new Date();

        jDateChooser.setDate(today);

        paymentmethod_background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/day.jpg"))); // NOI18N
        panel_day.add(paymentmethod_background1);
        paymentmethod_background1.setBounds(0, 0, 490, 370);

        FilterTransaction.addTab("Day", panel_day);

        panel_Month.setBackground(new java.awt.Color(0, 0, 0, 80));
        panel_Month.setLayout(null);

        lbl_amountthreshold1.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        lbl_amountthreshold1.setForeground(new java.awt.Color(255, 255, 255));
        lbl_amountthreshold1.setText("Please choose a month to filter");
        panel_Month.add(lbl_amountthreshold1);
        lbl_amountthreshold1.setBounds(60, 50, 290, 32);

        btn_month.setBackground(new java.awt.Color(127, 166, 196));
        btn_month.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_month.setText("Filter");
        btn_month.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_monthActionPerformed(evt);
            }
        });
        panel_Month.add(btn_month);
        btn_month.setBounds(320, 280, 80, 40);

        jMonthChooser.setBackground(new java.awt.Color(175, 205, 176));
        jMonthChooser.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jMonthChooser.setMonth(3);
        jMonthChooser.setYearChooser(jYearChooser);
        panel_Month.add(jMonthChooser);
        jMonthChooser.setBounds(50, 100, 160, 50);

        jYearChooser.setBackground(new java.awt.Color(175, 205, 176));
        panel_Month.add(jYearChooser);
        jYearChooser.setBounds(210, 100, 150, 50);

        background_month.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/monthly.jpg"))); // NOI18N
        panel_Month.add(background_month);
        background_month.setBounds(0, 0, 420, 370);

        FilterTransaction.addTab("Month", panel_Month);

        panel_amounthreshold.setBackground(new java.awt.Color(0, 0, 0, 80));
        panel_amounthreshold.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panel_amounthreshold.setLayout(null);

        jComboBox_amount.setBackground(new java.awt.Color(221, 181, 161));
        jComboBox_amount.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jComboBox_amount.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash In", "Cash Out" }));
        panel_amounthreshold.add(jComboBox_amount);
        jComboBox_amount.setBounds(20, 100, 370, 50);

        lbl_amountthreshold.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        lbl_amountthreshold.setForeground(new java.awt.Color(255, 255, 255));
        lbl_amountthreshold.setText("Please choose a payment method to filter");
        panel_amounthreshold.add(lbl_amountthreshold);
        lbl_amountthreshold.setBounds(10, 50, 420, 32);

        btn_filteramount.setBackground(new java.awt.Color(225, 168, 154));
        btn_filteramount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_filteramount.setText("Filter");
        btn_filteramount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_filteramount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_filteramountActionPerformed(evt);
            }
        });
        panel_amounthreshold.add(btn_filteramount);
        btn_filteramount.setBounds(320, 280, 80, 40);

        backgroundamount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/amountthreshold.jpg"))); // NOI18N
        panel_amounthreshold.add(backgroundamount);
        backgroundamount.setBounds(0, 0, 490, 400);

        FilterTransaction.addTab("Amount Threshold", panel_amounthreshold);

        panel_paymentmethod.setBackground(new java.awt.Color(0, 0, 0, 80));
        panel_paymentmethod.setLayout(null);

        lbl_paymentmethod.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        lbl_paymentmethod.setForeground(new java.awt.Color(255, 255, 255));
        lbl_paymentmethod.setText("Please choose an amount threshold to filter");
        panel_paymentmethod.add(lbl_paymentmethod);
        lbl_paymentmethod.setBounds(10, 50, 430, 32);

        jComboBox_payment.setBackground(new java.awt.Color(236, 231, 204));
        jComboBox_payment.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jComboBox_payment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fund Transfer", "Card Transfer" }));
        panel_paymentmethod.add(jComboBox_payment);
        jComboBox_payment.setBounds(20, 100, 370, 50);

        btn_filtermethod.setBackground(new java.awt.Color(226, 216, 187));
        btn_filtermethod.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_filtermethod.setText("Filter");
        btn_filtermethod.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_filtermethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_filtermethodActionPerformed(evt);
            }
        });
        panel_paymentmethod.add(btn_filtermethod);
        btn_filtermethod.setBounds(320, 280, 80, 40);

        paymentmethod_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/paymentmethod.jpg"))); // NOI18N
        panel_paymentmethod.add(paymentmethod_background);
        paymentmethod_background.setBounds(0, 0, 490, 400);

        FilterTransaction.addTab("Payment Method", panel_paymentmethod);

        panel_categoricalTypes.setBackground(new java.awt.Color(0, 0, 0, 80));
        panel_categoricalTypes.setLayout(null);

        lbl_choosecategorical.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        lbl_choosecategorical.setForeground(new java.awt.Color(255, 255, 255));
        lbl_choosecategorical.setText("Please choose a category to filter");
        panel_categoricalTypes.add(lbl_choosecategorical);
        lbl_choosecategorical.setBounds(40, 50, 340, 32);

        jComboBox_category.setBackground(new java.awt.Color(168, 224, 171));
        jComboBox_category.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jComboBox_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Entertainment", "Exchange Currency", "Food", "Grocery" }));
        panel_categoricalTypes.add(jComboBox_category);
        jComboBox_category.setBounds(20, 100, 370, 50);

        btn_filtercategory.setBackground(new java.awt.Color(176, 217, 177));
        btn_filtercategory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_filtercategory.setText("Filter");
        btn_filtercategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_filtercategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_filtercategoryActionPerformed(evt);
            }
        });
        panel_categoricalTypes.add(btn_filtercategory);
        btn_filtercategory.setBounds(320, 280, 80, 40);

        filter_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/category.jpg"))); // NOI18N
        filter_background.setText("jLabel1");
        panel_categoricalTypes.add(filter_background);
        filter_background.setBounds(0, -4, 490, 410);

        FilterTransaction.addTab("Categorical Types", panel_categoricalTypes);

        getContentPane().add(FilterTransaction);
        FilterTransaction.setBounds(610, 50, 420, 430);

        btn_done1.setBackground(new java.awt.Color(252, 252, 236));
        btn_done1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_done1.setText("Done");
        btn_done1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_done1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_done1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_done1);
        btn_done1.setBounds(950, 500, 80, 40);

        btn_back.setBackground(new java.awt.Color(252, 252, 236));
        btn_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_back.setText("Back");
        btn_back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });
        getContentPane().add(btn_back);
        btn_back.setBounds(840, 500, 90, 40);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/history.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1070, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_done1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_done1ActionPerformed
        UserHomePage userHomePage = new UserHomePage(user);
        userHomePage.setUser();
        userHomePage.setUserTypes();
        userHomePage.setVisible(true);
        userHomePage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btn_done1ActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        PensievePast history = new PensievePast(user);
        history.setVisible(true);
        history.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_filtercategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_filtercategoryActionPerformed

        List<String> allElements = getAllElementsFromFile("transactionhistory.txt");

        String selectedFunction = (String) jComboBox_category.getSelectedItem();
        DefaultListModel<String> filteredModel = new DefaultListModel<>();

        switch (selectedFunction) {
            case "Food":
            case "Grocery":
            case "Entertainment":
            case "Fund Transfer":
                for (String element : allElements) {
                    if (element.contains(selectedFunction)) {
                        filteredModel.addElement(element);
                    }
                }
                break;

            case "Exchange Currency":
                for (String element : allElements) {
                    if (element.startsWith("EX")) {
                        filteredModel.addElement(element);
                    }
                }
                break;
        }

        displayTransactionHistoryList.setModel(filteredModel);
    }//GEN-LAST:event_btn_filtercategoryActionPerformed

    private void btn_filtermethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_filtermethodActionPerformed
        List<String> allElements = getAllElementsFromFile("transactionhistory.txt");

        String selectedFunction = (String) jComboBox_payment.getSelectedItem();
        DefaultListModel<String> filteredModel = new DefaultListModel<>();

        switch (selectedFunction) {
            case "Fund Transfer":
                filteredModel.addAll(allElements);
                break;

            case "Card Transfer":
                filteredModel.addElement("======== In the mystical realm of Hogwarts, should the user conjure =======");
                filteredModel.addElement("======= a payment through the enchantment of a card, the annals of ======");
                filteredModel.addElement("======= transactions shall reveal this sorcery as a transfer by card. ========");
                filteredModel.addElement("====== However, for now, it remains shrouded in mystery, appearing =======");
                filteredModel.addElement("====== as a blank canvas awaiting the wizardry of future transactions. =====");

                break;
        }

        displayTransactionHistoryList.setModel(filteredModel);
    }//GEN-LAST:event_btn_filtermethodActionPerformed

    private void btn_filteramountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_filteramountActionPerformed
        List<String> allElements = getAllElementsFromFile("transactionhistory.txt");

        String selectedFunction = (String) jComboBox_amount.getSelectedItem();
        DefaultListModel<String> filteredModel = new DefaultListModel<>();

        switch (selectedFunction) {
            case "Cash Out":
                for (String element : allElements) {
                    String[] parts = element.split(" ······ ");
                    if (parts[3].startsWith("-")) {
                        filteredModel.addElement(element);
                    }
                }
                break;

            case "Cash In":
                for (String element : allElements) {
                    String[] parts = element.split(" ······ ");
                    if (parts[3].startsWith("+")) {
                        filteredModel.addElement(element);
                    }
                }
                break;
        }

        displayTransactionHistoryList.setModel(filteredModel);
    }//GEN-LAST:event_btn_filteramountActionPerformed

    private void btn_dailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dailyActionPerformed

        List<String> allElements = getAllElementsFromFile("transactionhistory.txt");

        // Get the selected date from the JDateChooser
        Date selectedDate = jDateChooser.getDate();

        // Convert the selected date to the format "MMM dd, yyyy"
        SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy");
        String selectedDateString = sdf.format(selectedDate);

        DefaultListModel<String> filteredModel = new DefaultListModel<>();
        boolean transactionsFound = false;

        for (String element : allElements) {
            String[] parts = element.split(" ······ ");
            String dateString = parts[1];
            try {
                Date date = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss").parse(dateString);
                String formattedDateString = sdf.format(date);
                if (formattedDateString.equals(selectedDateString)) {
                    filteredModel.addElement(element);
                    transactionsFound = true;
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }

        if (!transactionsFound) {
            filteredModel.addElement("No transactions done on " + selectedDateString);
        }

        displayTransactionHistoryList.setModel(filteredModel);

    }//GEN-LAST:event_btn_dailyActionPerformed

    private void btn_monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_monthActionPerformed
        List<String> allElements = getAllElementsFromFile("transactionhistory.txt");

        // Get the selected month and year from the JMonthChooser and JYearChooser
        int selectedMonth = jMonthChooser.getMonth() + 1; // Month is 0-based, so add 1
        int selectedYear = jYearChooser.getYear();

        // Convert the selected month and year to the format "MMM, yyyy"
        SimpleDateFormat sdf = new SimpleDateFormat("MMM, yyyy");
        Calendar selectedCalendar = Calendar.getInstance();
        selectedCalendar.set(Calendar.MONTH, selectedMonth - 1); // Month is 0-based, so subtract 1
        selectedCalendar.set(Calendar.YEAR, selectedYear);
        String selectedDateString = sdf.format(selectedCalendar.getTime());

        DefaultListModel<String> filteredModel = new DefaultListModel<>();
        boolean transactionsFound = false;

        for (String element : allElements) {
            String[] parts = element.split(" ······ ");
            String dateString = parts[1];
            try {
                Date date = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss").parse(dateString);
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(date);
                if (calendar.get(Calendar.MONTH) + 1 == selectedMonth && calendar.get(Calendar.YEAR) == selectedYear) {
                    filteredModel.addElement(element);
                    transactionsFound = true;
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }

        if (!transactionsFound) {
            filteredModel.addElement("No transactions done in " + selectedDateString);
        }

        displayTransactionHistoryList.setModel(filteredModel);
    }//GEN-LAST:event_btn_monthActionPerformed

    // Method to display the transaction history of the user
    public void displayTransactionHistory() {

        try {
            // Establish a connection to the MySQL database
            Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");

            // Prepare the SQL statement to fetch transaction history for the user
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT TransactionID, Amount AS TotalAmountPaid, NULL as AmountConverted, Timestamp, fromAccount, toAccount, TransferTypes "
                    + "FROM `transfertransaction` "
                    + "WHERE fromAccount = ? OR toAccount = ? "
                    + "UNION "
                    + "SELECT TransactionID, TotalAmountPaid, AmountConverted, Timestamp, NULL as fromAccount, NULL as toAccount, NULL as TransferTypes "
                    + "FROM `exchangetransaction` "
                    + "WHERE UserID = ? "
                    + "ORDER BY STR_TO_DATE(Timestamp, '%M %e, %Y %H:%i:%s') DESC"
            );
            //PreparedStatement statement = connection.prepareStatement("SELECT TransactionID, Amount AS TotalAmountPaid, NULL as AmountConverted, Timestamp, fromAccount, toAccount, TransferTypes FROM `transfertransaction` WHERE fromAccount = ? OR toAccount = ? UNION SELECT TransactionID, TotalAmountPaid, AmountConverted, Timestamp, NULL as fromAccount, NULL as toAccount, NULL as TransferTypes FROM `exchangetransaction` WHERE UserID = ? ORDER BY STR_TO_DATE(Timestamp, '%M %e, %Y %H:%i:%s') DESC");

            statement.setString(1, user.getUserID());
            statement.setString(2, user.getUserID());
            statement.setString(3, user.getUserID());
            ResultSet resultSet = statement.executeQuery();

            // Create a list model to hold the transaction history items
            DefaultListModel<String> listModel = new DefaultListModel<>();

            while (resultSet.next()) {
                String transactionID = resultSet.getString("TransactionID");
                String timestamp = resultSet.getString("Timestamp");
                double totalAmountPaid = resultSet.getDouble("TotalAmountPaid");
                String fromAccount = resultSet.getString("fromAccount");
                String toAccount = resultSet.getString("toAccount");
                String AmountConverted = resultSet.getString("AmountConverted");
                String transferTypes = resultSet.getString("TransferTypes");

                // Determine the transfer type for display
                String transferType;
                if (fromAccount != null && toAccount != null) {
                    switch (transferTypes) {
                        case "Food":
                            transferType = "Food";
                            break;
                        case "Entertainment":
                            transferType = "Entertainment";
                            break;
                        case "Grocery":
                            transferType = "Grocery";
                            break;
                        default:
                            transferType = "Exchange";
                            break;
                    }
                } else {
                    transferType = "Exchange";
                }

                // Determine the color for the total amount based on the account involved
                Color totalAmountColor;
                Color convertedAmountColor;
                if (fromAccount != null && fromAccount.equals(user.getUserID())) {
                    totalAmountPaid = -totalAmountPaid;
                    totalAmountColor = new Color(246, 120, 128); // Red for negative amount, which is cash out
                } else if (toAccount != null && toAccount.equals(user.getUserID())) {
                    totalAmountColor = new Color(103, 153, 217); // Blue for positive amount, which is cash in
                } else {
                    totalAmountPaid = -totalAmountPaid;
                    totalAmountColor = new Color(246, 120, 128);
                }

                // Format the total amount for display
                String formattedTotalAmountPaid;
                if (totalAmountPaid >= 0) {
                    formattedTotalAmountPaid = "+" + String.format("%.2f", totalAmountPaid);
                } else {
                    formattedTotalAmountPaid = String.format("%.2f", totalAmountPaid);
                }
                // Add the total amount paid to the list model
                listModel.addElement(transactionID + " ······ " + timestamp + " ······ " + transferType + " ······ " + formattedTotalAmountPaid);

                // Add the converted amount to the list model only if it's not null
                if (AmountConverted != null) {
                    double amountConvertedDouble = Double.parseDouble(AmountConverted);
                    String formattedAmountConverted;
                    if (amountConvertedDouble >= 0) {
                        formattedAmountConverted = "+" + String.format("%.2f", amountConvertedDouble);
                    } else {
                        formattedAmountConverted = String.format("%.2f", amountConvertedDouble);
                    }
                    convertedAmountColor = new Color(103, 153, 217); // Blue for converted amount
                    listModel.addElement(transactionID + " ······ " + timestamp + " ······ " + transferType + " ······ " + formattedAmountConverted);
                }
            }

            resultSet.close();
            statement.close();
            connection.close();

            // Set the list model for the display list and apply custom cell renderer
            displayTransactionHistoryList.setModel(listModel);
            displayTransactionHistoryList.setCellRenderer(new MyListCellRenderer());

            // Save transaction history to file
            storeElementsToFile(displayTransactionHistoryList, "transactionhistory.txt");
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle any exceptions
        }
    }

    // Custom ListCellRenderer to change the text color based on transaction type
    public class MyListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            // Call the superclass method to get the default rendering
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            // Set the text color based on the transaction type
            if (value instanceof String) {
                String[] parts = ((String) value).split(" ······ ");
                if (parts.length >= 4) {
                    String totalAmountString = parts[3].replaceAll("<[^>]*>", ""); // Remove HTML tags
                    double totalAmount = Double.parseDouble(totalAmountString);
                    Color textColor = totalAmount < 0 ? new Color(246, 120, 128) : new Color(103, 153, 217); // Red for negative, blue for positive

                    setForeground(textColor);
                }
            }

            return this;
        }
    }

    /**
     * Retrieve all elements from a JList and return them as a list of strings.
     *
     * @param jList The JList containing the elements.
     * @return A list containing all elements from the JList.
     */
    public List<String> getAllElementsFromJList(JList<String> jList) {
        // Get the list model
        DefaultListModel<String> model = (DefaultListModel<String>) jList.getModel();
        int size = model.getSize();

        // Create a list to store the elements
        List<String> elements = new ArrayList<>();

        // Iterate through the model and add each element to the list
        for (int i = 0; i < size; i++) {
            String element = model.getElementAt(i);
            elements.add(element);
        }
        return elements;
    }

    /**
     * Store all elements of a JList into a file.
     *
     * @param jList The JList containing the elements to be stored.
     * @param filePath The path of the file where the elements will be stored.
     */
    public void storeElementsToFile(JList<String> jList, String filePath) {
        // Get the list model
        DefaultListModel<String> model = (DefaultListModel<String>) jList.getModel();
        int size = model.getSize();

        // Use try-with-resources to handle file writing
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            // Iterate through the model and write each element to the file
            for (int i = 0; i < size; i++) {
                String element = model.getElementAt(i);
                writer.write(element);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Retrieve all elements from a file and return them as a list of strings.
     *
     * @param filePath The path of the file containing the elements.
     * @return A list containing all elements from the file.
     */
    public List<String> getAllElementsFromFile(String filePath) {
        // Create a list to store the elements
        List<String> elements = new ArrayList<>();

        // Use try-with-resources to handle file reading
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            // Read each line from the file and add it to the list
            while ((line = reader.readLine()) != null) {
                elements.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return elements;
    }

    /**
     * Adds a mouse listener to the displayTransactionHistoryList to handle
     * single-click events. Retrieves the selected transaction information and
     * opens the history details page. Ensures that the mouse listener is added
     * only once.
     */
    private void addListMouseListener() {
        if (!mouseListenerAdded) {
            // Add a new mouse listener to the displayTransactionHistoryList
            displayTransactionHistoryList.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    // Check if it's a single click
                    if (e.getClickCount() == 1) {
                        // Get the index of the clicked item
                        int index = displayTransactionHistoryList.locationToIndex(e.getPoint());
                        // Ensure that a valid index is selected
                        if (index != -1) {
                            // Get the selected transaction information
                            String selectedTransactionInfo = (String) displayTransactionHistoryList.getModel().getElementAt(index);
                            // Extract the transaction ID from the selected information
                            String transactionID = selectedTransactionInfo.split(" ······ ")[0];
                            String amount = selectedTransactionInfo.split(" ······ ")[3];
                            // Open the history details page for the selected transaction
                            openHistoryDetailsPage(user, transactionID, amount);
                        }
                    }
                }
            });
            // Set the flag to indicate that the mouse listener has been added
            mouseListenerAdded = true;
        }
    }

    /**
     * Opens a new HistoryDetails page with the specified user account and transaction ID.
     *
     * @param user The user account for which the history details are being displayed
     * @param transactionID The ID of the transaction
     */
    public void openHistoryDetailsPage(Account user, String transactionID, String amount) {
        HistoryDetails historyDetailsPage = new HistoryDetails(user, transactionID, amount);
        historyDetailsPage.setVisible(true);
        historyDetailsPage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterTransaction.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterTransaction.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterTransaction.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterTransaction.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilterTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane FilterTransaction;
    private javax.swing.JLabel background;
    private javax.swing.JLabel background_month;
    private javax.swing.JLabel backgroundamount;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_daily;
    private javax.swing.JButton btn_done1;
    private javax.swing.JButton btn_filteramount;
    private javax.swing.JButton btn_filtercategory;
    private javax.swing.JButton btn_filtermethod;
    private javax.swing.JButton btn_month;
    private final javax.swing.JList<String> displayTransactionHistoryList = new JList<>(new DefaultListModel<>());
    private javax.swing.JLabel filter_background;
    private javax.swing.JComboBox<String> jComboBox_amount;
    private javax.swing.JComboBox<String> jComboBox_category;
    private javax.swing.JComboBox<String> jComboBox_payment;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private com.toedter.calendar.JMonthChooser jMonthChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JYearChooser jYearChooser;
    private javax.swing.JLabel lbl_amountthreshold;
    private javax.swing.JLabel lbl_amountthreshold1;
    private javax.swing.JLabel lbl_choosecategorical;
    private javax.swing.JLabel lbl_daily;
    private javax.swing.JLabel lbl_filtertransaction;
    private javax.swing.JLabel lbl_paymentmethod;
    private javax.swing.JPanel panel_Month;
    private javax.swing.JPanel panel_amounthreshold;
    private javax.swing.JPanel panel_categoricalTypes;
    private javax.swing.JPanel panel_day;
    private javax.swing.JPanel panel_paymentmethod;
    private javax.swing.JLabel paymentmethod_background;
    private javax.swing.JLabel paymentmethod_background1;
    // End of variables declaration//GEN-END:variables
}
