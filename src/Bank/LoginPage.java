/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bank;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Base64;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class LoginPage extends javax.swing.JFrame {

    /**
     * Creates new form LoginPage
     */
    public LoginPage() {
        setTitle("Login");
        initComponents();
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        BankPic = new javax.swing.JLabel();
        UsernameField = new javax.swing.JTextField();
        Username = new javax.swing.JLabel();
        Password = new javax.swing.JLabel();
        LoginTitle = new javax.swing.JLabel();
        ForgotPw = new javax.swing.JLabel();
        SignUp = new javax.swing.JLabel();
        ForgotPwButton = new javax.swing.JButton();
        Login = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        SignUpButton = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        Help = new javax.swing.JLabel();
        Time = new javax.swing.JLabel();
        Phone = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 600));
        setPreferredSize(new java.awt.Dimension(1070, 600));

        jPanel2.setBackground(new java.awt.Color(52, 55, 59));

        BankPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bank.jpg"))); // NOI18N
        BankPic.setText("jLabel1");

        UsernameField.setBackground(new java.awt.Color(110, 85, 89));
        UsernameField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        UsernameField.setForeground(new java.awt.Color(255, 255, 255));
        UsernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameFieldActionPerformed(evt);
            }
        });

        Username.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Username.setForeground(new java.awt.Color(255, 255, 255));
        Username.setText("Username: ");

        Password.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Password.setForeground(new java.awt.Color(255, 255, 255));
        Password.setText("Password:");

        LoginTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        LoginTitle.setForeground(new java.awt.Color(255, 255, 255));
        LoginTitle.setText("Log In");

        ForgotPw.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ForgotPw.setForeground(new java.awt.Color(255, 255, 255));
        ForgotPw.setText("Forgot password?");

        SignUp.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SignUp.setForeground(new java.awt.Color(255, 255, 255));
        SignUp.setText("Haven't register?");

        ForgotPwButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ForgotPwButton.setForeground(new java.awt.Color(255, 255, 255));
        ForgotPwButton.setText("Click here");
        ForgotPwButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ForgotPwButton.setContentAreaFilled(false);
        ForgotPwButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ForgotPwButton.setDefaultCapable(false);
        ForgotPwButton.setFocusPainted(false);
        ForgotPwButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForgotPwButtonActionPerformed(evt);
            }
        });

        Login.setBackground(new java.awt.Color(255, 204, 102));
        Login.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Login.setText("Login");
        Login.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(63, 55, 59));

        SignUpButton.setBackground(new java.awt.Color(41, 25, 30));
        SignUpButton.setForeground(new java.awt.Color(255, 255, 255));
        SignUpButton.setText("Sign Up");
        SignUpButton.setContentAreaFilled(false);
        SignUpButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SignUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignUpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SignUpButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(SignUpButton)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo50x50.png"))); // NOI18N
        Logo.setText("jLabel1");

        Help.setForeground(new java.awt.Color(255, 255, 255));
        Help.setText("Need Help?");

        Time.setForeground(new java.awt.Color(255, 255, 255));
        Time.setText("24/7 Phone Assistance");

        Phone.setForeground(new java.awt.Color(255, 255, 255));
        Phone.setText("018-7777358");

        PasswordField.setBackground(new java.awt.Color(110, 85, 89));
        PasswordField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        PasswordField.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Login, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(SignUp, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Help, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Time)
                            .addComponent(Phone, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(LoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(ForgotPwButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ForgotPw, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(PasswordField)
                                .addGap(7, 7, 7)))))
                .addGap(132, 132, 132)
                .addComponent(BankPic, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BankPic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(LoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(PasswordField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(ForgotPwButton))
                            .addComponent(ForgotPw, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(Login)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SignUp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Help)
                                .addGap(6, 6, 6)
                                .addComponent(Time)
                                .addGap(6, 6, 6)
                                .addComponent(Phone)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(1084, 607));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void UsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsernameFieldActionPerformed

    /**
     * Action performed when the login button is clicked.
     * Retrieves the username and password entered by the user, verifies them against the database,
     * and logs in the user if the credentials are valid.
     * @param evt The action event.
     */
    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Get the username and password from user
        String usernameText = UsernameField.getText();
        char[] password = PasswordField.getPassword();
        String passwordText = new String(password);
        
        // SQL query to select the account with the provided username
        String query = "SELECT * FROM Account WHERE BINARY Username = ?";
        int notFound = 0;
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Establish a connection to our database
            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
            // Prepare the SQL statement
            statement = connection.prepareStatement(query);

            // Check if username or password fields are empty
            if ("".equals(usernameText) || "".equals(passwordText)) {
                JOptionPane.showMessageDialog(new JFrame(), "All the credentials must be filled", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Set the username parameter in the SQL query
                statement.setString(1, usernameText);
                // Execute the query
                resultSet = statement.executeQuery();

                // Loop through the result set to get the information needed
                while (resultSet.next()) {
                    // Retrieve stored hash and salt from the database
                    String storedHash = resultSet.getString("Password").trim();
                    String storedSalt = resultSet.getString("Salt").trim();
                    String name = resultSet.getString("Username");
                    notFound = 1;

                    // Decode the salt and hash the entered password
                    byte[] salt = Base64.getDecoder().decode(storedSalt);
                    String hashedEnteredPassword = hashPassword(passwordText, salt);

                    // Check if the hashed entered password matches the stored hash
                    if (storedHash.equals(hashedEnteredPassword)) {
                        // Passwords match, login successful
                        Account user = getAccountData(usernameText);
                        JOptionPane.showMessageDialog(new JFrame(), "Welcome Back!");
                        
                        // Proceed with what you want to do after successful login
                        if (user != null) {
                            // Send login notification email
                            EmailVerification.sendEmail(user.getEmail(), "New login to Egringotts", 
                                    """
                                       We have detected a recent sign-in to your Egringotts account. Please ensure your account remains secure by verifying this activity.
                                                                                                    
                                       To maintain the sanctity of your account and guard your treasure, always keep your credentials safe from prying eyes.
                                                                                                    
                                       Should you have any inquiries or require assistance, our trusted Goblin, Denise, is at your service. Reach her at 0187777358 for prompt support.
                                                                                                    
                                       Stay vigilant and may your vaults remain ever prosperous!
                                                                                                    
                                       Yours magically,
                                                                              
                                       The Egringotts Team""");
                            
                            // Proceed to user home page
                            UserHomePage home = new UserHomePage(user);
                            home.setUser();
                            home.setUserTypes();
                            home.setVisible(true);
                            home.setLocationRelativeTo(null);
                            this.dispose();

                        } else {
                            System.out.println("ERROR!");
                        }
                    } else {
                        // Incorrect password
                        JOptionPane.showMessageDialog(new JFrame(), "Incorrect password", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                // If user not found in the database
                if (notFound == 0) {
                    JOptionPane.showMessageDialog(new JFrame(), "User not found", "Error", JOptionPane.ERROR_MESSAGE);
                }
                // Clear the password field
                PasswordField.setText("");
            }
        } catch (Exception e) {
            // Handle any exceptions that occur
            System.out.println("Error! " + e.getMessage());
        } finally {
            // Close all database resources
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }

    /**
     * Retrieves account data from the database based on the provided username.
     * @param username The username of the account.
     * @return An Account object containing the user's data, or null if the account was not found.
     */
    private Account getAccountData(String username) {
        Account accountData = null;
        Connection connection = null;
        PreparedStatement statement = null, statement2 = null;
        ResultSet resultSet = null, resultSet2 = null;

        try {
            // Load MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Establish a connection to the database
            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");

            // Query to select account details based on the username
            String query = "SELECT * FROM Account WHERE Username = ?";
            statement = connection.prepareStatement(query);
            statement.setString(1, username);

            // Execute the query
            resultSet = statement.executeQuery();

            // If user exists in the database
            if (resultSet.next()) {
                // Retrieve user details from the result set
                String userID = resultSet.getString("UserID");
                String contact = resultSet.getString("Telephone");
                //Have to use passwordField password to store in account class because the password is hashed in the database
                char[] password = PasswordField.getPassword();
                String passwordText = new String(password);
                String Password = passwordText;
                String PIN = resultSet.getString("PIN");
                String email = resultSet.getString("Email");
                String address = resultSet.getString("Address");
                String dob = resultSet.getString("DOB");
                String imagepath = resultSet.getString("Imagepath");
                String cardNum = resultSet.getString("Card");
                String CVV = resultSet.getString("cVV");
                String expiry = resultSet.getString("cardExpiry");
                int transferLimit = resultSet.getInt("CardTransferLimit");

                // Create a Card object with the retrieved details (debit card)
                Card card = new Card(userID, cardNum, Integer.parseInt(CVV), expiry, transferLimit);
                // Create a UserData object to hold the retrieved data
                accountData = new Account(userID, username, contact, Password, PIN, email, address, dob, new UserAvatar(imagepath, userID), card);

                // Check if the user has a credit card associated with their account
                String query2 = "SELECT * FROM galleoncreditcard WHERE UserID=?";
                statement2 = connection.prepareStatement(query2);
                statement2.setString(1, userID);

                // Execute the query
                resultSet2 = statement2.executeQuery();

                // If user has a credit card
                if (resultSet2.next()) {
                    // Retrieve credit card details from the result set
                    String galleon = resultSet2.getString("Galleon");
                    String creditCardNum = resultSet2.getString("Card");
                    String cVV = resultSet2.getString("cVV");
                    String cardExpiry = resultSet2.getString("cardExpiry");

                    // Create a Card object for the credit card with the retrieved details
                    Card creditCard = new Card(userID, creditCardNum, Integer.parseInt(cVV), cardExpiry, Double.parseDouble(galleon));
                    // Add the credit card to the Account object
                    accountData.addCreditCard(creditCard);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close all database resources
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
                if (resultSet2 != null) {
                    resultSet2.close();
                }
                if (statement2 != null) {
                    statement2.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
        // Return the populated Account object or null if no account was found
        return accountData;
    }

    /**
     * Hashes a password with a given salt using SHA-256.
     *
     * @param password The password to be hashed.
     * @param salt The salt to be used in the hashing process.
     * @return The hashed password as a Base64 encoded string.
     * @throws NoSuchAlgorithmException If SHA-256 algorithm is not available.
     */
    public static String hashPassword(String password, byte[] salt) throws NoSuchAlgorithmException {
        // Get a MessageDigest instance for SHA-256
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        // Add the salt to the MessageDigest
        digest.update(salt);
        // Hash the password bytes
        byte[] hashedBytes = digest.digest(password.getBytes());
        // Convert the hashed bytes to a Base64 encoded string and return it
        return Base64.getEncoder().encodeToString(hashedBytes);
    }

    /**
     * Verifies if the entered password matches the stored hashed password.
     *
     * @param enteredPassword The password entered by the user.
     * @param storedHash The stored hashed password.
     * @param salt The salt used when the stored hash was generated.
     * @return true if the entered password matches the stored hash, false otherwise.
     * @throws NoSuchAlgorithmException If SHA-256 algorithm is not available.
     */
    public static boolean verifyPassword(String enteredPassword, String storedHash, byte[] salt) throws NoSuchAlgorithmException {
        // Hash the entered password with the same salt
        String hashedEnteredPassword = hashPassword(enteredPassword, salt);
        // Compare the hashed entered password with the stored hash
        return hashedEnteredPassword.equals(storedHash);
    }

    /**
     * Action performed when the "Forgot Password" button is clicked.
     * Opens the ForgotPassword frame to allow users to reset their password.
     * @param evt The action event.
     */
    private void ForgotPwButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForgotPwButtonActionPerformed
        // Create a new instance of the ForgotPassword frame
        ForgotPassword forgotPassword = new ForgotPassword();
        // Set the ForgotPassword frame to be visible
        forgotPassword.setVisible(true);
        // Pack the frame to fit the preferred size and layouts of its components
        forgotPassword.pack();
        // Center the ForgotPassword frame on the screen
        forgotPassword.setLocationRelativeTo(null);
        // Dispose of the current frame (close it)
        dispose();
    }//GEN-LAST:event_ForgotPwButtonActionPerformed

    /**
     * Action performed when the "Sign Up" button is clicked.
     * Opens the SignUpPage frame to allow users to register for a new account.
     * @param evt The action event.
     */
    private void SignUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignUpButtonActionPerformed
        // Create a new instance of the SignUpPage frame
        SignUpPage signup = new SignUpPage();
        // Set the SignUpPage frame to be visible
        signup.setVisible(true);
        // Pack the frame to fit the preferred size and layouts of its components
        signup.pack();
        // Center the SignUpPage frame on the screen
        signup.setLocationRelativeTo(null);
        // Dispose of the current frame (close it)
        dispose();
    }//GEN-LAST:event_SignUpButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
                new LoginPage().setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BankPic;
    private javax.swing.JLabel ForgotPw;
    private javax.swing.JButton ForgotPwButton;
    private javax.swing.JLabel Help;
    private javax.swing.JButton Login;
    private javax.swing.JLabel LoginTitle;
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel Password;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel Phone;
    private javax.swing.JLabel SignUp;
    private javax.swing.JButton SignUpButton;
    private javax.swing.JLabel Time;
    private javax.swing.JLabel Username;
    private javax.swing.JTextField UsernameField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
