/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bank;

import Admin.AdminProfile;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Base64;


public class ChangePassword extends javax.swing.JFrame {

    private Account user;// Account object representing the user
    private String loggedInUsername;// Stores the logged-in username

    /**
     * Creates new form ChangePassword
     */
    public ChangePassword() {
        setTitle("Change Password");
        initComponents();
        //use the same class but a little bit different in function
        oldPasswordLabel.setText("Enter username");
    }

    /**
     * Creates a new instance of ChangePassword with an option to hide the back button
     * 
     * @param fromForgotPassword Flag indicating if accessed from forgot password
     */
    public ChangePassword(boolean fromForgotPassword) {
        setTitle("Change Password");
        initComponents();
        //use the same class but a little bit different in function
        //change the oldpasswordlabel to Username if it is from ForgotPassword class
        oldPasswordLabel.setText("Enter username");
        if (fromForgotPassword) {
            back.setVisible(false); // Hide the back button if accessed from forgot password
        }
    }

    /**
     * Creates a new instance of ChangePassword with user details
     * 
     * @param user The account object representing the user
     */
    public ChangePassword(Account user) {
        setTitle("Change Password");
        this.user = user;
        initComponents();
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        changePasswordTitle = new javax.swing.JLabel();
        oldPasswordLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        oldPasswordField = new javax.swing.JTextField();
        newPasswordField = new javax.swing.JTextField();
        newPasswordField1 = new javax.swing.JTextField();
        back = new javax.swing.JButton();
        done = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 400));
        getContentPane().setLayout(null);

        changePasswordTitle.setFont(new java.awt.Font("Calibri", 1, 45)); // NOI18N
        changePasswordTitle.setForeground(new java.awt.Color(255, 255, 255));
        changePasswordTitle.setText("Change Password");
        getContentPane().add(changePasswordTitle);
        changePasswordTitle.setBounds(30, 30, 340, 50);

        oldPasswordLabel.setBackground(new java.awt.Color(255, 255, 255));
        oldPasswordLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        oldPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        oldPasswordLabel.setText("Enter old password ");
        getContentPane().add(oldPasswordLabel);
        oldPasswordLabel.setBounds(40, 120, 160, 20);

        newPasswordLabel.setBackground(new java.awt.Color(255, 255, 255));
        newPasswordLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        newPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        newPasswordLabel.setText("Enter new password ");
        getContentPane().add(newPasswordLabel);
        newPasswordLabel.setBounds(40, 180, 160, 20);

        confirmPasswordLabel.setBackground(new java.awt.Color(255, 255, 255));
        confirmPasswordLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        confirmPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        confirmPasswordLabel.setText("Confirm new password ");
        getContentPane().add(confirmPasswordLabel);
        confirmPasswordLabel.setBounds(40, 240, 180, 20);

        oldPasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        oldPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldPasswordFieldActionPerformed(evt);
            }
        });
        getContentPane().add(oldPasswordField);
        oldPasswordField.setBounds(250, 110, 170, 30);

        newPasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(newPasswordField);
        newPasswordField.setBounds(250, 170, 170, 30);

        newPasswordField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(newPasswordField1);
        newPasswordField1.setBounds(250, 230, 170, 30);

        back.setText("Back");
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(30, 320, 80, 30);

        done.setText("Done");
        done.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(done);
        done.setBounds(450, 320, 80, 30);
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/changePassword.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 600, 400);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void oldPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oldPasswordFieldActionPerformed

    /**
     * Handles the action event for the back button click
     * 
     * @param evt The action event
     */
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        String userType = user.getUser().getUserType();
        if (userType.equals("Goblin")) {
            // Navigate to AdminProfile if user is an admin
            AdminProfile adminProfile = new AdminProfile(user);
            adminProfile.setUser();
            adminProfile.setUserType(userType);
            adminProfile.setVisible(true);
            adminProfile.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            this.dispose();
        } else {
            // Navigate to UserProfile if user is not an admin
            UserProfile userProfile = new UserProfile(user);
            userProfile.setUser();
            userProfile.setUserType(userType);
            userProfile.setVisible(true);
            userProfile.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_backActionPerformed

    /**
     * Handles the action event for the done button click
     * 
     * @param evt The action event
     */
    private void doneActionPerformed(java.awt.event.ActionEvent evt) {
        if (user != null) {// If accessed from an existing user
            //this one use userid as the key to change password
            String Userid, Newpassword, selectquery, updatequery;
            int notFound = 0;

            try {
                // Establish database connection
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
                Statement statement = connection.createStatement();

                // Validate input fields
                if ("".equals(oldPasswordField.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Old password is required!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if ("".equals(newPasswordField.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "New password is required!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if ("".equals(newPasswordField1.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Please confirm your new password!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (!newPasswordField.getText().equals(newPasswordField1.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Please confirm your new password!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (!oldPasswordField.getText().equals(user.getPassword())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Wrong old password!", "Error", JOptionPane.ERROR_MESSAGE);
                }else if (newPasswordField1.getText().length() < 8) {
                    JOptionPane.showMessageDialog(new JFrame(), "Password must be at least 8 characters long!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // Retrieve user ID and new password
                    Userid = user.getUserID();
                    Newpassword = newPasswordField.getText();
                    user.setPassword(Newpassword);
                    selectquery = "SELECT * FROM Account WHERE UserID= ?";
                    updatequery = "UPDATE Account SET Password=? WHERE UserID=?";

                    // Prepare and execute database queries
                    PreparedStatement selectStatement = connection.prepareStatement(selectquery);
                    selectStatement.setString(1, Userid);
                    ResultSet resultset = selectStatement.executeQuery();

                    while (resultset.next()) {
                        String storedHash = Newpassword;
                        String storedSalt = resultset.getString("Salt").trim();
                        byte[] salt = Base64.getDecoder().decode(storedSalt);//decode the hashed password
                        String hashedPassword = hashPassword(storedHash, salt);//hash the new password
                        notFound = 1;

                        if (notFound == 1) {
                            // Update password in the database
                            PreparedStatement updateStatement = connection.prepareStatement(updatequery);
                            updateStatement.setString(1, hashedPassword);
                            updateStatement.setString(2, Userid);
                            updateStatement.executeUpdate();
                            JOptionPane.showMessageDialog(new JFrame(), "Password Changed Successfully!");

                            // Navigate to the login page
                            LoginPage LoginFrame = new LoginPage();
                            LoginFrame.setVisible(true);
                            LoginFrame.pack();
                            LoginFrame.setLocationRelativeTo(null);
                            dispose();
                        } else {
                            JOptionPane.showMessageDialog(new JFrame(), "Invalid old password", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    if (notFound == 0) {
                        JOptionPane.showMessageDialog(new JFrame(), "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (Exception e) {
                System.out.println("Error!" + e.getMessage());

            }
        } else {
            //use the same class but a little bit different in function
            //this one use username as the key to change password because parse from the forgot password
            String Username, Newpassword, selectquery, updatequery;
            int notFound = 0;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
                Statement statement = connection.createStatement();

                Username = oldPasswordField.getText();

                // Validate input fields
                if ("".equals(oldPasswordField.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Username is required!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if ("".equals(newPasswordField.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "New password is required!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if ("".equals(newPasswordField1.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Please confirm your new password!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (!newPasswordField.getText().equals(newPasswordField1.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Please confirm your new password!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (!Username.equals(loggedInUsername)) {
                    JOptionPane.showMessageDialog(new JFrame(), "Wrong username!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // Retrieve new password
                    Newpassword = newPasswordField.getText();
                    selectquery = "SELECT * FROM Account WHERE Username= ?";
                    updatequery = "UPDATE Account SET Password=? WHERE Username=?";

                    // Prepare and execute database queries
                    PreparedStatement selectStatement = connection.prepareStatement(selectquery);
                    selectStatement.setString(1, Username);
                    ResultSet resultset = selectStatement.executeQuery();

                    while (resultset.next()) {
                        String storedHash = Newpassword;
                        String storedSalt = resultset.getString("Salt").trim();
                        byte[] salt = Base64.getDecoder().decode(storedSalt);//decode the hashedpassword
                        String hashedPassword = hashPassword(storedHash, salt);//hash the new password
                        notFound = 1;

                        if (notFound == 1) {
                            // Update password in the database
                            PreparedStatement updateStatement = connection.prepareStatement(updatequery);
                            updateStatement.setString(1, hashedPassword);
                            updateStatement.setString(2, Username);
                            updateStatement.executeUpdate();
                            JOptionPane.showMessageDialog(new JFrame(), "Password Changed Successfully!");

                            // Navigate to the login page
                            LoginPage LoginFrame = new LoginPage();
                            LoginFrame.setVisible(true);
                            LoginFrame.pack();
                            LoginFrame.setLocationRelativeTo(null);
                            dispose();
                        } else {
                            JOptionPane.showMessageDialog(new JFrame(), "Invalid username", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    if (notFound == 0) {
                        JOptionPane.showMessageDialog(new JFrame(), "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                connection.close();
            } catch (Exception e) {
                System.out.println("Error!" + e.getMessage());

            }
        }
    }

    // Method to retrieve username by email from the database
    public void getUsernamebyEmail(String email) {
        String username = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");

            String sql = "SELECT Username FROM Account WHERE Email = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, email);

            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                username = resultSet.getString("Username");
            }
            connection.close();
        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        }
        this.loggedInUsername = username;
    }

    // Method to hash a password with a given salt
    public static String hashPassword(String password, byte[] salt) throws NoSuchAlgorithmException {
        //hashing the password for extra security
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        digest.update(salt);
        byte[] hashedBytes = digest.digest(password.getBytes());
        return Base64.getEncoder().encodeToString(hashedBytes);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChangePassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JLabel background;
    private javax.swing.JLabel changePasswordTitle;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JButton done;
    private javax.swing.JTextField newPasswordField;
    private javax.swing.JTextField newPasswordField1;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JTextField oldPasswordField;
    private javax.swing.JLabel oldPasswordLabel;
    // End of variables declaration//GEN-END:variables
}
