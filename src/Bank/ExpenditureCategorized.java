/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bank;

import java.awt.Color;
import java.util.Random;
import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author USER
 */
public class ExpenditureCategorized extends javax.swing.JFrame {

    private Account user;       // User account details
    private static final String DB_URL = "jdbc:mysql://127.0.0.1:3306/Egringotts";      
    private static final String USER = "root";      
    private static final String PASSWORD = "password";      

    /**
     * Creates new form expenditure
     */
    public ExpenditureCategorized() {
        initComponents();
        Wand.setCustomIcon(this);// Set custom icons
        Wand.setCustomCursor(this);// Set custom cursor
    }

    public ExpenditureCategorized(Account user) {
        setTitle("Expenditures Categorized Page");
        this.user = user;
        initComponents();
        Wand.setCustomIcon(this);// Set custom icons
        Wand.setCustomCursor(this);// Set custom cursor
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_expenditure = new javax.swing.JLabel();
        pieChartPanel = new javax.swing.JPanel();
        btn_back = new javax.swing.JButton();
        btn_go = new javax.swing.JButton();
        btn_done = new javax.swing.JButton();
        jYearChooser = new com.toedter.calendar.JYearChooser();
        jMonthChooser = new com.toedter.calendar.JMonthChooser();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 600));
        setPreferredSize(new java.awt.Dimension(1070, 600));
        getContentPane().setLayout(null);

        lbl_expenditure.setFont(new java.awt.Font("Calibri", 1, 45)); // NOI18N
        lbl_expenditure.setForeground(new java.awt.Color(255, 255, 255));
        lbl_expenditure.setText("Expenditures Categorized");
        getContentPane().add(lbl_expenditure);
        lbl_expenditure.setBounds(40, 30, 520, 60);

        pieChartPanel.setBackground(new java.awt.Color(255, 255, 255));
        pieChartPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(pieChartPanel);
        pieChartPanel.setBounds(40, 110, 880, 390);

        btn_back.setBackground(new java.awt.Color(252, 252, 236));
        btn_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_back.setText("Back");
        btn_back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });
        getContentPane().add(btn_back);
        btn_back.setBounds(950, 440, 80, 40);

        btn_go.setBackground(new java.awt.Color(252, 252, 236));
        btn_go.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_go.setText("Go");
        btn_go.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_goActionPerformed(evt);
            }
        });
        getContentPane().add(btn_go);
        btn_go.setBounds(950, 380, 80, 40);

        btn_done.setBackground(new java.awt.Color(252, 252, 236));
        btn_done.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_done.setText("Done");
        btn_done.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_doneActionPerformed(evt);
            }
        });
        getContentPane().add(btn_done);
        btn_done.setBounds(950, 500, 80, 40);
        getContentPane().add(jYearChooser);
        jYearChooser.setBounds(794, 50, 120, 40);

        jMonthChooser.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMonthChooser.setMonth(3);
        getContentPane().add(jMonthChooser);
        jMonthChooser.setBounds(650, 50, 120, 40);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/expenditure.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1070, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_goActionPerformed
        // Get the selected month and year from the month chooser and year chooser
        // Note: Month is zero-based (0 for January, 11 for December)
        int month = jMonthChooser.getMonth(); // Month is zero-based (0 - 11)
        int year = (int) jYearChooser.getYear();

        // Create a DateFormatSymbols instance to get month names
        DateFormatSymbols dfs = new DateFormatSymbols();
        String monthName = dfs.getMonths()[month];
        String selectedMonthYear = monthName + ", " + year;

        calculateExpenditurePercentage(user.getUserID(), selectedMonthYear);

        createPieChart(selectedMonthYear);

    }//GEN-LAST:event_btn_goActionPerformed

    private void btn_doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_doneActionPerformed
        UserHomePage userHomePage = new UserHomePage(user);
        userHomePage.setUser();
        userHomePage.setUserTypes();
        userHomePage.setVisible(true);
        userHomePage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btn_doneActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        PensievePast pensievepast = new PensievePast(user);
        pensievepast.setVisible(true);
        pensievepast.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btn_backActionPerformed
    
    // Method to create and display a pie chart for expenditures in a selected month and year
    private void createPieChart(String selectedMonthYear) {
        // Create a dataset to hold the expenditure percentages
        DefaultPieDataset dataset = new DefaultPieDataset();

        // Get expenditure percentages for the selected month and year
        Map<String, Double> expenditurePerType = calculateExpenditurePercentage(user.getUserID(), selectedMonthYear);
        
        // Check if there are any expenditures for the selected month and year
        if (expenditurePerType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No expenditures in " + selectedMonthYear, "No Expenditures", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Add expenditure percentages to the dataset
        for (Map.Entry<String, Double> entry : expenditurePerType.entrySet()) {
            dataset.setValue(entry.getKey(), entry.getValue());
        }

        // Create the pie chart
        JFreeChart chart = ChartFactory.createPieChart(
                "Expenditure Categories for " + selectedMonthYear, // chart title
                dataset, // Data for the chart
                true, // Include legend
                true, // Enable tooltips
                false // Disable URLs
        );

        // Customize the chart plot
        PiePlot plot = (PiePlot) chart.getPlot();
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}: {1} ({2})")); // Set label format

        // Generate random colors for each section
        List<Color> colors = new ArrayList<>();
        Random rand = new Random();
        for (int i = 0; i < dataset.getItemCount(); i++) {
            float r = rand.nextFloat();
            float g = rand.nextFloat();
            float b = rand.nextFloat();
            colors.add(new Color(r, g, b));
        }

        // Assign generated colors to each section of the pie chart
        for (int i = 0; i < dataset.getItemCount(); i++) {
            plot.setSectionPaint(dataset.getKey(i), colors.get(i));
        }

        // Display the pie chart
        ChartPanel chartPanel = new ChartPanel(chart);
        pieChartPanel.removeAll(); // Remove any existing chart
        pieChartPanel.add(chartPanel, java.awt.BorderLayout.CENTER);
        pieChartPanel.validate();
    }

    // Method to calculate the expenditure percentage for each categorical type for a selected month and year
    private Map<String, Double> calculateExpenditurePercentage(String userid, String selectedMonthYear) {
        // Map to store the expenditure percentages for each categorical type
        Map<String, Double> expenditurePerType = new HashMap<>();

        // Using try-with-resources to ensure the Connection and Statement are closed automatically
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
                Statement stmt = conn.createStatement()) {

            // SQL query to select relevant transaction and currency data
            // Joining the transfertransaction and currency tables based on the currency name
            String query = "SELECT t.amount, t.currency, t.transfertypes, t.timestamp, c.RateToGalleon "
                    + "FROM transfertransaction t "
                    + "INNER JOIN currency c ON t.currency = c.currencyname "
                    + "WHERE t.fromAccount = '" + userid + "'";

            // Execute the query and store the result set
            ResultSet rs = stmt.executeQuery(query);

            // Variable to accumulate the total expenditure in Galleons
            double totalExpenditure = 0.0;

            // Iterate through each row in the result set
            while (rs.next()) {
                double amount = rs.getDouble("amount");
                String currency = rs.getString("currency");
                String transfertypes = rs.getString("transfertypes");
                double rateToGalleon = rs.getDouble("RateToGalleon");
                String timestamp = rs.getString("timestamp");

                // Split the timestamp to extract month and year 
                String[] parts = timestamp.split(" ");
                // Extract the month part)
                String month = parts[0];
                // Extract the year part and convert to integer
                int year = Integer.parseInt(parts[2]);

                // Check if the transaction month and year match the selected month and year
                if (month.equalsIgnoreCase(selectedMonthYear.split(", ")[0]) && year == Integer.parseInt(selectedMonthYear.split(", ")[1])) {
                    // Calculate amount in Galleon
                    double amountInGalleon = amount / rateToGalleon;

                    // Update total ExpenditureCategorized for the month
                    totalExpenditure += amountInGalleon;

                    // Update ExpenditureCategorized per type
                    expenditurePerType.put(transfertypes, expenditurePerType.getOrDefault(transfertypes, 0.0) + amountInGalleon);
                }
            }

            // Calculate ExpenditureCategorized percentage for each type
            if (totalExpenditure > 0) {
                for (String type : expenditurePerType.keySet()) {
                    double expenditure = expenditurePerType.get(type);
                    double percentage = (expenditure / totalExpenditure) * 100;
                    // Update the map with the calculated percentage
                    expenditurePerType.put(type, percentage);
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return expenditurePerType;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExpenditureCategorized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExpenditureCategorized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExpenditureCategorized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExpenditureCategorized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExpenditureCategorized().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_done;
    private javax.swing.JButton btn_go;
    private com.toedter.calendar.JMonthChooser jMonthChooser;
    private com.toedter.calendar.JYearChooser jYearChooser;
    private javax.swing.JLabel lbl_expenditure;
    private javax.swing.JPanel pieChartPanel;
    // End of variables declaration//GEN-END:variables
}
