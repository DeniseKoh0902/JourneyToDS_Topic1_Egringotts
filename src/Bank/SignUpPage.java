/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bank;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * Represents the sign-up page where users can register for a new account.
 */
public class SignUpPage extends javax.swing.JFrame {

    /**
     * Creates new form SignUpPage
     */
    public SignUpPage() {
        setTitle("Sign Up");
        initComponents();
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        MoneyPic = new javax.swing.JLabel();
        SignUpTitle = new javax.swing.JLabel();
        Username = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        Usernamefield = new javax.swing.JTextField();
        ConfirmPw = new javax.swing.JLabel();
        PIN = new javax.swing.JLabel();
        ConfirmPIN = new javax.swing.JLabel();
        Telephone = new javax.swing.JLabel();
        Emailf = new javax.swing.JTextField();
        Telephonef = new javax.swing.JTextField();
        Email = new javax.swing.JLabel();
        Mailing = new javax.swing.JLabel();
        Mailingf = new javax.swing.JTextField();
        SignUpButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        PasswordField = new javax.swing.JPasswordField();
        ConfirmPasswordField = new javax.swing.JPasswordField();
        PINf = new javax.swing.JPasswordField();
        confirmPINf = new javax.swing.JPasswordField();
        Logo = new javax.swing.JLabel();
        Help = new javax.swing.JLabel();
        Time = new javax.swing.JLabel();
        Phone = new javax.swing.JLabel();
        DOB = new javax.swing.JLabel();
        DOBField = new javax.swing.JTextField();
        Format = new javax.swing.JLabel();
        Terms = new javax.swing.JButton();
        TermsButton = new javax.swing.JRadioButton();
        check_showPswd = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 600));

        jPanel1.setBackground(new java.awt.Color(52, 55, 59));

        MoneyPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/money.jpg"))); // NOI18N
        MoneyPic.setText("jLabel1");

        SignUpTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        SignUpTitle.setForeground(new java.awt.Color(255, 255, 255));
        SignUpTitle.setText("Sign Up");

        Username.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Username.setForeground(new java.awt.Color(255, 255, 255));
        Username.setText("Username:");

        password.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        password.setForeground(new java.awt.Color(255, 255, 255));
        password.setText("Password:");

        Usernamefield.setBackground(new java.awt.Color(110, 85, 89));
        Usernamefield.setForeground(new java.awt.Color(255, 255, 255));

        ConfirmPw.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ConfirmPw.setForeground(new java.awt.Color(255, 255, 255));
        ConfirmPw.setText("Confirm password:");

        PIN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PIN.setForeground(new java.awt.Color(255, 255, 255));
        PIN.setText("PIN (6-digit) :");

        ConfirmPIN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ConfirmPIN.setForeground(new java.awt.Color(255, 255, 255));
        ConfirmPIN.setText("Confirm PIN:");

        Telephone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Telephone.setForeground(new java.awt.Color(255, 255, 255));
        Telephone.setText("Telephone:");

        Emailf.setBackground(new java.awt.Color(110, 85, 89));
        Emailf.setForeground(new java.awt.Color(255, 255, 255));

        Telephonef.setBackground(new java.awt.Color(110, 85, 89));
        Telephonef.setForeground(new java.awt.Color(255, 255, 255));
        Telephonef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TelephonefActionPerformed(evt);
            }
        });

        Email.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Email.setForeground(new java.awt.Color(255, 255, 255));
        Email.setText("Email address:");

        Mailing.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Mailing.setForeground(new java.awt.Color(255, 255, 255));
        Mailing.setText("Mailing home address:");

        Mailingf.setBackground(new java.awt.Color(110, 85, 89));
        Mailingf.setForeground(new java.awt.Color(255, 255, 255));

        SignUpButton.setBackground(new java.awt.Color(255, 204, 102));
        SignUpButton.setText("Sign Up");
        SignUpButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SignUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignUpButtonActionPerformed(evt);
            }
        });

        BackButton.setBackground(new java.awt.Color(255, 204, 102));
        BackButton.setText("Back");
        BackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        PasswordField.setBackground(new java.awt.Color(110, 85, 89));
        PasswordField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PasswordField.setForeground(new java.awt.Color(255, 255, 255));
        PasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordFieldActionPerformed(evt);
            }
        });

        ConfirmPasswordField.setBackground(new java.awt.Color(110, 85, 89));
        ConfirmPasswordField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ConfirmPasswordField.setForeground(new java.awt.Color(255, 255, 255));

        PINf.setBackground(new java.awt.Color(110, 85, 89));
        PINf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PINf.setForeground(new java.awt.Color(255, 255, 255));

        confirmPINf.setBackground(new java.awt.Color(110, 85, 89));
        confirmPINf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        confirmPINf.setForeground(new java.awt.Color(255, 255, 255));

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo50x50.png"))); // NOI18N
        Logo.setText("jLabel1");

        Help.setForeground(new java.awt.Color(255, 255, 255));
        Help.setText("Need Help?");

        Time.setForeground(new java.awt.Color(255, 255, 255));
        Time.setText("24/7 Phone Assistance");

        Phone.setForeground(new java.awt.Color(255, 255, 255));
        Phone.setText("018-7777358");

        DOB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DOB.setForeground(new java.awt.Color(255, 255, 255));
        DOB.setText("Date Of Birth:");

        DOBField.setBackground(new java.awt.Color(110, 85, 89));
        DOBField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DOBField.setForeground(new java.awt.Color(255, 255, 255));
        DOBField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DOBFieldActionPerformed(evt);
            }
        });

        Format.setForeground(new java.awt.Color(255, 255, 255));
        Format.setText("Please enter in yyyy-mm-dd format");

        Terms.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Terms.setForeground(new java.awt.Color(255, 255, 255));
        Terms.setText("Do you agree the Terms and Conditions ?");
        Terms.setBorderPainted(false);
        Terms.setContentAreaFilled(false);
        Terms.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Terms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TermsActionPerformed(evt);
            }
        });

        TermsButton.setBackground(new java.awt.Color(52, 55, 59));
        TermsButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        TermsButton.setForeground(new java.awt.Color(255, 255, 255));
        TermsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TermsButton.setMaximumSize(new java.awt.Dimension(24, 24));
        TermsButton.setPreferredSize(new java.awt.Dimension(24, 24));
        TermsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TermsButtonActionPerformed(evt);
            }
        });

        check_showPswd.setForeground(new java.awt.Color(255, 255, 255));
        check_showPswd.setText("Show Password");
        check_showPswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_showPswdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PIN, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                        .addGap(29, 29, 29)
                                        .addComponent(PINf, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Emailf, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(SignUpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ConfirmPIN, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DOB, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(DOBField, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                            .addComponent(confirmPINf)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(147, 147, 147)
                                        .addComponent(Format, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Mailing, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Mailingf, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SignUpButton)
                                .addGap(47, 47, 47)
                                .addComponent(BackButton)
                                .addGap(87, 87, 87)
                                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Help, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Phone, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(check_showPswd, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                    .addComponent(Usernamefield)
                                    .addComponent(PasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConfirmPw, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Telephone, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Telephonef)
                                    .addComponent(ConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(Terms, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TermsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(MoneyPic, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MoneyPic, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(SignUpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Usernamefield, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Telephone, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Telephonef, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfirmPw, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(check_showPswd)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PIN, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfirmPIN, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PINf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmPINf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Format)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Emailf, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DOB)
                    .addComponent(DOBField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Mailing, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(Mailingf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Terms)
                    .addComponent(TermsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SignUpButton)
                            .addComponent(BackButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(Help)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Time)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Phone))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(Logo)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TelephonefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TelephonefActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TelephonefActionPerformed

    private void PasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordFieldActionPerformed

    private void DOBFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DOBFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DOBFieldActionPerformed

    /**
     * Action performed when the "Terms" button is clicked.
     * Opens the terms and conditions page in the default web browser.
     * @param evt The action event.
     */
    private void TermsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TermsActionPerformed
        // Get the URL of the resource
        URL link = getClass().getResource("/Bank/TermsAndCondition.html");

        if (link != null) {
            try {
                // Convert URL to file path
                String filePath = link.toURI().getPath();

                // Create a File object using the file path
                File file = new File(filePath);

                // Open the file in the default web browser
                Desktop.getDesktop().browse(file.toURI());
            } catch (IOException | URISyntaxException ex) {
                Logger.getLogger(SignUpPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.err.println("Resource not found.");
        }
    }//GEN-LAST:event_TermsActionPerformed

    private void TermsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TermsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TermsButtonActionPerformed

    /**
     * Action performed when the "Sign Up" button is clicked.
     * Handles the sign-up process by validating user inputs and storing user data in the database.
     * @param evt The action event.
     */
    private void SignUpButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //Initialise the data field that we want to store
        String UserID, Username, Telephone, Password, ConfirmPassword, PIN, ConfirmPIN, Email, DOB, Address;
        Connection connection = null;
        Statement statement = null;
        List<String> errors = new ArrayList<>();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
            statement = connection.createStatement();

            // Generate a unique UserID
            UserID = generateUniqueUserID(connection);
            //get the text from the field
            Username = Usernamefield.getText();
            Telephone = Telephonef.getText();
            char[] password = PasswordField.getPassword();
            Password = new String(password);
            char[] ConfirmPasswordChars = ConfirmPasswordField.getPassword();
            ConfirmPassword = new String(ConfirmPasswordChars);
            char[] PINchars = PINf.getPassword();
            PIN = new String(PINchars);
            char[] ConfirmPINchars = confirmPINf.getPassword();
            ConfirmPIN = new String(ConfirmPINchars);
            Email = Emailf.getText();
            Address = Mailingf.getText();
            DOB = DOBField.getText();
            boolean isTermSelected = TermsButton.isSelected();

            // Validate all fields are filled
            if (Username.isEmpty() || Password.isEmpty() || ConfirmPassword.isEmpty() || Email.isEmpty() || Telephone.isEmpty() || PIN.isEmpty() || ConfirmPIN.isEmpty() || Address.isEmpty() || DOB.isEmpty()) {
                errors.add("All the credentials must be filled!");
            } else {
                // Validate date of birth format
                if (!isValidDate(DOB)) {
                    errors.add("Invalid date of birth format or invalid date. Please use YYYY-MM-DD format.");
                }

                // Validate PIN format
                if (PIN.length() != 6 || !PIN.matches("\\d{6}")) {
                    errors.add("PIN must be exactly 6 digits.");
                }

                // Validate telephone format
                if (!Telephone.matches("\\d+")) {
                    errors.add("Telephone must contain only digits.");
                }

                // Check for existing username
                ResultSet resultSetUsername = statement.executeQuery("SELECT * FROM Account WHERE Username = '" + Username + "'");
                if (resultSetUsername.next()) {
                    errors.add("This username is already exists!");
                }

                // Check for existing contact number
                ResultSet resultSetContact = statement.executeQuery("SELECT * FROM Account WHERE Telephone = '" + Telephone + "'");
                if (resultSetContact.next()) {
                    errors.add("This contact number is already exists!");
                }

                // Check for existing email
                ResultSet resultSetEmail = statement.executeQuery("SELECT * FROM Account WHERE Email = '" + Email + "'");
                if (resultSetEmail.next()) {
                    errors.add("This email is already exists!");
                }

                // Validate password length
                if (Password.length() < 8) {
                    errors.add("Password must be at least 8 characters long.");
                }
                
                // Validate passwords match
                if (!Password.equals(ConfirmPassword)) {
                    errors.add("Please confirm your password correctly!");
                }

                // Validate that ConfirmPIN matches PIN
                if (!ConfirmPIN.equals(PIN)) {
                    errors.add("PIN confirmation does not match PIN.");
                }

                // Validate email format
                if (!Email.contains("@")) {
                    errors.add("Invalid email format.");
                }

                if (Username.contains(" ")) {
                    errors.add("Username cannot contains space.");
                }

                if (isTermSelected == false) {
                    errors.add("You must agree with the terms and condition before sign up.");
                }
            }

            // Show all errors at once if any exist
            if (!errors.isEmpty()) {
                JOptionPane.showMessageDialog(new JFrame(), String.join("\n", errors), "Error", JOptionPane.ERROR_MESSAGE);
                return;  // Stop further processing
            }

            // Generate a random salt
            byte[] salt = generateSalt();
            String hashedPassword = hashPassword(Password, salt);
            String getsalt = Base64.getEncoder().encodeToString(salt);
            System.out.println("Password: " + Password);
            System.out.println("Salt: " + getsalt);
            System.out.println("Hashed Password: " + hashedPassword);

            Card card = new Card();
            String cardNum = String.valueOf(card.getCardNum()),
                    cVV = String.valueOf(card.getCVV()),
                    expiry = String.valueOf(card.getExpiryDate());

            // Check for existing card number
            while (true) {
                ResultSet resultSetContact = statement.executeQuery("SELECT * FROM Account WHERE Card = '" + cardNum + "'");
                if (!resultSetContact.next()) {
                    break;
                } else {
                    cardNum = String.valueOf(new Card().getCardNum());
                    cVV = String.valueOf(new Card().getCVV());
                    expiry = String.valueOf(new Card().getExpiryDate());;
                }
            }

            String imagepath = "/Images/profilePic.jpg";
            // Insert the user details into the database
            String query = "INSERT INTO Account(UserID, Username, Telephone, Password, Salt, PIN, Email, Address, DOB, Imagepath, Card, cVV, cardExpiry) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, UserID);
            preparedStatement.setString(2, Username);
            preparedStatement.setString(3, Telephone);
            preparedStatement.setString(4, hashedPassword);
            preparedStatement.setString(5, getsalt);
            preparedStatement.setString(6, PIN);
            preparedStatement.setString(7, Email);
            preparedStatement.setString(8, Address);
            preparedStatement.setString(9, DOB);
            preparedStatement.setString(10, imagepath);
            preparedStatement.setString(11, cardNum);
            preparedStatement.setString(12, cVV);
            preparedStatement.setString(13, expiry);

            preparedStatement.execute();
            preparedStatement.close();

            String query1 = "INSERT INTO userbalance(UserID, Knut) VALUES (?,?)";
            PreparedStatement preparedStatement1 = connection.prepareStatement(query1);
            preparedStatement1.setString(1, UserID);
            preparedStatement1.setString(2, "50.00");
            preparedStatement1.execute();
            preparedStatement1.close();
            
            EmailVerification.sendEmail(Emailf.getText(), "Successful sign up to Egringotts", "Dear " + Usernamefield.getText()+",\n\n"+
                                    """
                                       Thank you for choosing Egringotts as your trusted partner in the magical realm of finance.
                                       
                                       You are receiving this enchanted missive because you have joined the ranks of esteemed Egringotts customers. 
                                       We uphold the highest security spells and protective enchantments to prevent unauthorized access to your account.
                                       
                                       Egringotts will never contact you by owl, parchment, or email to ask you to validate personal information such as your Username, Password, or Account Numbers. 
                                       If you receive such a request, do not respond and immediately contact our Goblin Customer Contact Centre at 018-7777358.
                                       
                                       Your email address has been collected to send you further enchanted communications about our products and services. 
                                       
                                       Please do not reply to this e-mail.
                                       
                                       
                                       Important Notes:
                                       1. It is crucial that you do not provide your account number, debit card number with PIN, or credit card number, or convey any confidential information or banking instructions to any person in any manner.
                                       2. If the account or Debit Card created does not belong to you, please immediately lodge a report to Egringotts Customer Contact Centre at 018-7777358.
                                       
                                       Stay vigilant, and may your vaults always be full!
                                       
                                       Yours magically,
                                       
                                       The Egringotts Team""");

            // Clear form fields and show success message
            Usernamefield.setText("");
            Telephonef.setText("");
            PasswordField.setText("");
            ConfirmPasswordField.setText("");
            PINf.setText("");
            confirmPINf.setText("");
            Emailf.setText("");
            Mailingf.setText("");

//            JOptionPane.showMessageDialog(null, "Congratulations, wizard! Your new account at Egringotts has been successfully created!");

        } catch (Exception e) {
            System.out.println("Error!" + e.getMessage());
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
        JOptionPane.showMessageDialog(null, "Congratulations, wizard! Your new account at Egringotts has been successfully created!");
        LoginPage login = new LoginPage();
        login.setVisible(true);
        login.pack();
        login.setLocationRelativeTo(null);
        dispose();
    }

    /**
     * Action performed when the "Back" button is clicked.
     * Navigates back to the login page.
     * @param evt The action event.
     */
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        LoginPage login = new LoginPage();
        login.setVisible(true);
        login.pack();
        login.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    /**
     * Action performed when the "Show Password" checkbox is clicked.
     * Toggles the visibility of the password field.
     * @param evt The action event.
     */
    private void check_showPswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_showPswdActionPerformed
        if (check_showPswd.isSelected()) {
            PasswordField.setEchoChar((char) 0);
        } else {
            PasswordField.setEchoChar('*');
        }
    }//GEN-LAST:event_check_showPswdActionPerformed

    /**
     * Method to generate a random salt.
     * @return The generated salt.
     */
    public static byte[] generateSalt() {
        byte[] salt = new byte[16];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);
        return salt;
    }

    /**
     * Method to hash a password with a given salt using SHA-256 algorithm.
     * @param password The password to hash.
     * @param salt The salt to use for hashing.
     * @return The hashed password as a Base64 encoded string.
     * @throws NoSuchAlgorithmException If the SHA-256 algorithm is not available.
     */
    public static String hashPassword(String password, byte[] salt) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        digest.update(salt);
        byte[] hashedBytes = digest.digest(password.getBytes());
        return Base64.getEncoder().encodeToString(hashedBytes);
    }

    /**
     * Method to generate a unique UserID.
     * @param connection The database connection.
     * @return The generated unique UserID.
     */
    public static String generateUniqueUserID(Connection connection) {
        String userID = null;
        boolean unique = false;

        try {
            // Check if the generated UserID is unique
            do {
                userID = generateUserID();
                String query = "SELECT UserID FROM Account WHERE UserID = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, userID);
                ResultSet resultSet = preparedStatement.executeQuery();
                unique = !resultSet.next(); // If the ResultSet is empty, the UserID is unique
                preparedStatement.close();
            } while (!unique);
        } catch (SQLException e) {
            System.out.println("Error checking unique UserID: " + e.getMessage());
        }

        return userID;
    }

    /**
     * Method to generate a UserID using UUID.
     * @return The generated UserID.
     */
    //uuid can help to generate unique id
    public static String generateUserID() {
        // Generate a random UUID
        UUID uuid = UUID.randomUUID();
        // Convert UUID to string and remove hyphens
        String userID = uuid.toString().replace("-", "");
        // Take the first 10 characters to ensure the UserID is 10 characters long
        userID = userID.substring(0, 10);
        return userID;
    }

    // Define the expected date format
    private static final String DATE_FORMAT = "yyyy-MM-dd";

    /**
     * Validate date format and check if it's a valid date.
     * @param dateStr The date string to validate.
     * @return True if the date is valid, false otherwise.
     */
    public static boolean isValidDate(String dateStr) {
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
        sdf.setLenient(false); // Disable lenient parsing

        try {
            // Attempt to parse the date
            sdf.parse(dateStr);
            return true; // Date is valid
        } catch (ParseException e) {
            return false; // Invalid date format or value
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUpPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUpPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUpPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUpPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignUpPage().setVisible(true);
                new SignUpPage().setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel ConfirmPIN;
    private javax.swing.JPasswordField ConfirmPasswordField;
    private javax.swing.JLabel ConfirmPw;
    private javax.swing.JLabel DOB;
    private javax.swing.JTextField DOBField;
    private javax.swing.JLabel Email;
    private javax.swing.JTextField Emailf;
    private javax.swing.JLabel Format;
    private javax.swing.JLabel Help;
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel Mailing;
    private javax.swing.JTextField Mailingf;
    private javax.swing.JLabel MoneyPic;
    private javax.swing.JLabel PIN;
    private javax.swing.JPasswordField PINf;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel Phone;
    private javax.swing.JButton SignUpButton;
    private javax.swing.JLabel SignUpTitle;
    private javax.swing.JLabel Telephone;
    private javax.swing.JTextField Telephonef;
    private javax.swing.JButton Terms;
    private javax.swing.JRadioButton TermsButton;
    private javax.swing.JLabel Time;
    private javax.swing.JLabel Username;
    private javax.swing.JTextField Usernamefield;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox check_showPswd;
    private javax.swing.JPasswordField confirmPINf;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel password;
    // End of variables declaration//GEN-END:variables
}
