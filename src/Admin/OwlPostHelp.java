/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Admin;

import Bank.Account;
import Bank.Wand;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.Timer;
import net.miginfocom.swing.MigLayout;

/**
 * Represents a JFrame that provides a chat interface for users to interact with a chatbot.
 * It loads chatbot responses from a file and allows users to send and receive messages.
 */

public class OwlPostHelp extends JFrame {

    private Account user;
    private List<String[]> chatBot;

    /**
     * Default constructor that initializes the OwlPostHelp window without user-specific data.
     */
    public OwlPostHelp() {
        initComponents();
        panel.setLayout(new MigLayout("fillx"));
        chatBot = loadChatBotResponses("chatbot.txt");
    }

    /**
     * Constructor that initializes the OwlPostHelp window with user-specific data.
     *
     * @param user The Account object representing the user.
     */
    public OwlPostHelp(Account user) {
        setTitle("Owl Post Help");       
        this.user = user;
        initComponents();
        panel.setLayout(new MigLayout("fillx"));
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
        chatBot = loadChatBotResponses("chatbot.txt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_aichat = new javax.swing.JLabel();
        input = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        jScrollPane_dialog = new javax.swing.JScrollPane();
        panel = new javax.swing.JPanel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        lbl_aichat.setFont(new java.awt.Font("Castellar", 1, 36)); // NOI18N
        lbl_aichat.setForeground(new java.awt.Color(255, 255, 255));
        lbl_aichat.setText("Owl Post Help");
        getContentPane().add(lbl_aichat);
        lbl_aichat.setBounds(50, 10, 440, 60);

        input.setColumns(20);
        input.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        input.setRows(5);
        input.setSelectionColor(new java.awt.Color(196, 195, 173));
        getContentPane().add(input);
        input.setBounds(50, 510, 430, 40);

        sendButton.setBackground(new java.awt.Color(211, 211, 180));
        sendButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sendButton.setText("Send");
        sendButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sendButton);
        sendButton.setBounds(480, 510, 90, 40);

        jScrollPane_dialog.setBackground(new java.awt.Color(0, 0, 0, 0));
        jScrollPane_dialog.setForeground(new java.awt.Color(255, 255, 255));

        panel.setBackground(new java.awt.Color(54, 49, 46));
        jScrollPane_dialog.setViewportView(panel);

        getContentPane().add(jScrollPane_dialog);
        jScrollPane_dialog.setBounds(50, 80, 500, 420);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/aichat.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 600, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String text = input.getText().trim();
        input.setText("");
        processInput(text);

    }//GEN-LAST:event_sendButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String text = "Welcome to the Enchanted Gringotts Chat Support! How may I assist you on this magical day?";
        Chat_Left item = new Chat_Left(text);
        panel.add(item, "wrap, w 80%");
        panel.revalidate();
        panel.repaint();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Processes the user input by displaying the user's message and generating a chatbot response.
     *
     * @param text The user input text.
     */
    private void processInput(String text) {
        Chat_Right chat = new Chat_Right(text);
        panel.add(chat, "wrap, w 80%, al right"); // Adds the user's chat message to the panel on the right side, with a width of 80% of the panel's width, ensure the component wraps
        panel.repaint(); //Repaints the panel to ensure the new component is visually updated.
        panel.revalidate(); //evalidates the panel to ensure the layout is recalculated and the new component is properly positioned.
        displayResponse(text);
    }

    /**
     * Displays the chatbot response
     *
     * @param text The user input text.
     */
    private void displayResponse(String text) {
        // Simulate delay for chat response
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String response = getResponse(text.toLowerCase());
                Chat_Left item = new Chat_Left(response);
                panel.add(item, "wrap, w 80%");
                panel.revalidate();
                panel.repaint();
            }
        });
        timer.setRepeats(false); // Only execute once
        timer.start();
    }

    /**
     * Gets a response from the chatbot based on the user input.
     *
     * @param userInput The user input text.
     * @return The chatbot response.
     */
    public String getResponse(String userInput) {
        String response = null;
        for (int i = 0; i < chatBot.size(); i++) {
            String[] pair = chatBot.get(i); 
            for (String keyword : pair[0].split(", ")) { //Iterates through each keyword-response pair in the chatBot list
                if (userInput.contains(keyword)) {
                    if (pair.length > 1) {
                        // If the response is not null, return it immediately
                        if (response != null) {
                            return response;
                        }
                        // Otherwise, store the response
                        response = pair[1];
                    }
                    break; // Exit the inner loop once a keyword is found
                }
            }
        }
        // If no specific response is found, return the default response
        return response != null ? response : chatBot.get(chatBot.size() - 1)[0];
    }

    /**
     * Loads chatbot responses from a file.
     *
     * @param filePath The path to the chatbot responses file.
     * @return A list of keyword-response pairs.
     */
    private List<String[]> loadChatBotResponses(String filePath) {
        List<String[]> chatBot = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String keyword = null;
            String response = null;
            String line;
            while ((line = br.readLine()) != null) {
                if (line.isEmpty()) {
                    // Skip blank lines
                    continue;
                }
                if (keyword == null) {
                    // Store keyword
                    keyword = line.trim();
                } else {
                    // Store response
                    response = line;
                    // Add keyword-response pair to the list
                    chatBot.add(new String[]{keyword, response});
                    keyword = null; // Reset keyword for the next pair
                }
            }
            // Add the default response if it's present
            if (response != null) {
                chatBot.add(new String[]{response});
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return chatBot;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OwlPostHelp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OwlPostHelp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OwlPostHelp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OwlPostHelp.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OwlPostHelp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JTextArea input;
    private javax.swing.JScrollPane jScrollPane_dialog;
    private javax.swing.JLabel lbl_aichat;
    private javax.swing.JPanel panel;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
