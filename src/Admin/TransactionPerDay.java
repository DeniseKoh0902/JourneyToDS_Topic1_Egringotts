/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Admin;

import Bank.*;
import javax.swing.JFrame;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * Represent the class for displaying daily transaction data in Egringotts
 * Allows admin to view transaction and exchange histories.
 
 */
public class TransactionPerDay extends javax.swing.JFrame {

    private Account user;

    /**
     * Creates new form TransactionPerDay with default constructor.
     * Initializes components and displays the number of transactions.
     */
    public TransactionPerDay() {
        initComponents();
        displayNumberOfTransaction(lbl_noftransaction);
    }

    /**
     * Creates new form TransactionPerDay with user parameter.
     * Initializes components, sets user, and displays the number of transactions.
     *
     * @param user The user account.
     */
    public TransactionPerDay(Account user) {
        setTitle("Show Daily Transaction");
        this.user = user;
        initComponents();
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
        displayNumberOfTransaction(lbl_noftransaction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_noftransaction = new javax.swing.JLabel();
        lbl_totaltransaction = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        btn_displaydaily = new javax.swing.JButton();
        btn_displayall = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        jLabel_choose = new javax.swing.JLabel();
        transactionhistoryPanel = new javax.swing.JTabbedPane();
        showtransactionhistory = new javax.swing.JPanel();
        table_transaction = new javax.swing.JScrollPane();
        rstable_transaction = new rojeru_san.complementos.RSTableMetro();
        showexchangetransaction = new javax.swing.JPanel();
        table_transaction1 = new javax.swing.JScrollPane();
        rstable_exchange = new rojeru_san.complementos.RSTableMetro();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 600));
        setPreferredSize(new java.awt.Dimension(1070, 600));
        getContentPane().setLayout(null);

        lbl_noftransaction.setFont(new java.awt.Font("Calibri", 1, 45)); // NOI18N
        lbl_noftransaction.setForeground(new java.awt.Color(255, 255, 255));
        lbl_noftransaction.setText("0");
        getContentPane().add(lbl_noftransaction);
        lbl_noftransaction.setBounds(590, 30, 250, 60);

        lbl_totaltransaction.setFont(new java.awt.Font("Calibri", 1, 45)); // NOI18N
        lbl_totaltransaction.setForeground(new java.awt.Color(255, 255, 255));
        lbl_totaltransaction.setText("Total Number of Transaction:");
        getContentPane().add(lbl_totaltransaction);
        lbl_totaltransaction.setBounds(20, 30, 560, 60);

        jDateChooser.setBackground(new java.awt.Color(152, 142, 165));
        jDateChooser.setDateFormatString("dd MMM yyyy");
        jDateChooser.setFocusCycleRoot(true);
        jDateChooser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(jDateChooser);
        jDateChooser.setBounds(700, 160, 330, 40);

        btn_displaydaily.setBackground(new java.awt.Color(131, 119, 156));
        btn_displaydaily.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_displaydaily.setText("Go");
        btn_displaydaily.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_displaydaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_displaydailyActionPerformed(evt);
            }
        });
        getContentPane().add(btn_displaydaily);
        btn_displaydaily.setBounds(950, 210, 80, 30);

        btn_displayall.setBackground(new java.awt.Color(131, 119, 156));
        btn_displayall.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_displayall.setText("Display All Transaction");
        btn_displayall.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_displayall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_displayallActionPerformed(evt);
            }
        });
        getContentPane().add(btn_displayall);
        btn_displayall.setBounds(700, 430, 330, 40);

        btn_back.setBackground(new java.awt.Color(131, 119, 156));
        btn_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_back.setText("Back");
        btn_back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });
        getContentPane().add(btn_back);
        btn_back.setBounds(700, 490, 330, 40);

        jLabel_choose.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        jLabel_choose.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_choose.setText("Choose a date to view daily transaction");
        getContentPane().add(jLabel_choose);
        jLabel_choose.setBounds(700, 130, 330, 25);

        transactionhistoryPanel.setBackground(new java.awt.Color(110, 97, 124));
        transactionhistoryPanel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        showtransactionhistory.setBackground(new java.awt.Color(75, 67, 84));

        rstable_transaction.setForeground(new java.awt.Color(119, 103, 131));
        rstable_transaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "To", "Amount", "Currency", "Timestamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rstable_transaction.setColorBackgoundHead(new java.awt.Color(90, 70, 114));
        rstable_transaction.setColorBordeFilas(new java.awt.Color(219, 219, 247));
        rstable_transaction.setColorBordeHead(new java.awt.Color(219, 219, 247));
        rstable_transaction.setColorFilasBackgound2(new java.awt.Color(216, 206, 225));
        rstable_transaction.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        rstable_transaction.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        rstable_transaction.setColorSelBackgound(new java.awt.Color(102, 102, 131));
        rstable_transaction.setColorSelForeground(new java.awt.Color(240, 230, 246));
        rstable_transaction.setFuenteFilas(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        rstable_transaction.setFuenteFilasSelect(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rstable_transaction.setFuenteHead(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rstable_transaction.setMultipleSeleccion(false);
        rstable_transaction.setRowHeight(30);
        rstable_transaction.setSelectionBackground(new java.awt.Color(251, 245, 255));
        rstable_transaction.setSelectionForeground(new java.awt.Color(124, 101, 142));
        rstable_transaction.getTableHeader().setReorderingAllowed(false);
        table_transaction.setViewportView(rstable_transaction);

        javax.swing.GroupLayout showtransactionhistoryLayout = new javax.swing.GroupLayout(showtransactionhistory);
        showtransactionhistory.setLayout(showtransactionhistoryLayout);
        showtransactionhistoryLayout.setHorizontalGroup(
            showtransactionhistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showtransactionhistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(table_transaction, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addContainerGap())
        );
        showtransactionhistoryLayout.setVerticalGroup(
            showtransactionhistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showtransactionhistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(table_transaction, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        transactionhistoryPanel.addTab("Transaction History", showtransactionhistory);

        showexchangetransaction.setBackground(new java.awt.Color(75, 67, 84));

        rstable_exchange.setForeground(new java.awt.Color(119, 103, 131));
        rstable_exchange.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Amount Paid", "Amount Converted", "Processing Fee", "Timestamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rstable_exchange.setColorBackgoundHead(new java.awt.Color(90, 70, 114));
        rstable_exchange.setColorBordeFilas(new java.awt.Color(219, 219, 247));
        rstable_exchange.setColorBordeHead(new java.awt.Color(219, 219, 247));
        rstable_exchange.setColorFilasBackgound2(new java.awt.Color(216, 206, 225));
        rstable_exchange.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        rstable_exchange.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        rstable_exchange.setColorSelBackgound(new java.awt.Color(102, 102, 131));
        rstable_exchange.setColorSelForeground(new java.awt.Color(240, 230, 246));
        rstable_exchange.setFuenteFilas(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        rstable_exchange.setFuenteFilasSelect(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rstable_exchange.setFuenteHead(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rstable_exchange.setMultipleSeleccion(false);
        rstable_exchange.setRowHeight(30);
        rstable_exchange.setSelectionBackground(new java.awt.Color(251, 245, 255));
        rstable_exchange.setSelectionForeground(new java.awt.Color(124, 101, 142));
        rstable_exchange.getTableHeader().setReorderingAllowed(false);
        table_transaction1.setViewportView(rstable_exchange);

        javax.swing.GroupLayout showexchangetransactionLayout = new javax.swing.GroupLayout(showexchangetransaction);
        showexchangetransaction.setLayout(showexchangetransactionLayout);
        showexchangetransactionLayout.setHorizontalGroup(
            showexchangetransactionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showexchangetransactionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(table_transaction1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addContainerGap())
        );
        showexchangetransactionLayout.setVerticalGroup(
            showexchangetransactionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showexchangetransactionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(table_transaction1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        transactionhistoryPanel.addTab("Exchange History", showexchangetransaction);

        getContentPane().add(transactionhistoryPanel);
        transactionhistoryPanel.setBounds(20, 90, 670, 450);
        transactionhistoryPanel.getAccessibleContext().setAccessibleName("Transaction History");

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/transactionAdmin.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1070, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Closes the current frame and opens the admin profile frame
    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        AdminProfile adminProfile = new AdminProfile(user);
        adminProfile.setUser();
        adminProfile.setVisible(true);
        adminProfile.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btn_backActionPerformed

    //Loads all transaction and exchange data
    private void btn_displayallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_displayallActionPerformed
        loadTransactionData();
        loadExchangeData();

    }//GEN-LAST:event_btn_displayallActionPerformed

    //Loads transaction data for the selected date
    private void btn_displaydailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_displaydailyActionPerformed
        Date selectedDate = jDateChooser.getDate();
        if (selectedDate == null) {
            JOptionPane.showMessageDialog(this, "Please choose a date.", "Error", JOptionPane.ERROR_MESSAGE);
        } else { // if selected a data
            loadTransactionDataForSelectedDate(selectedDate);
        }

    }//GEN-LAST:event_btn_displaydailyActionPerformed

    //method to load transaction data from the database
    public void loadTransactionData() {
        String url = "jdbc:mysql://127.0.0.1:3306/Egringotts";
        String user = "root";
        String password = "password";

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Establishing the connection
            connection = DriverManager.getConnection(url, user, password);
            statement = connection.createStatement();

            // Query to retrieve data, ordered by converted timestamp in descending order
            String query = "SELECT t.fromaccount, t.toaccount, t.amount, t.currency, t.timestamp, "
                    + "(SELECT a.username FROM account a WHERE a.userid = t.fromaccount) AS fromUsername, "
                    + "(SELECT a.username FROM account a WHERE a.userid = t.toaccount) AS toUsername "
                    + "FROM transfertransaction t ORDER BY STR_TO_DATE(t.timestamp, '%M %e, %Y %H:%i:%s') DESC";
            resultSet = statement.executeQuery(query);

            // Creating the table model
            DefaultTableModel tableModel = (DefaultTableModel) rstable_transaction.getModel();

            // Clearing any existing rows in the model
            tableModel.setRowCount(0);

            // Populating the table model with data
            while (resultSet.next()) {
                String fromAccount = resultSet.getString("fromUsername");
                String toAccount = resultSet.getString("toUsername");
                double amount = resultSet.getDouble("amount");
                String currency = resultSet.getString("currency");
                String timestampString = resultSet.getString("timestamp");

                // Convert the timestamp string to java.sql.Timestamp
                Timestamp timestamp = null;
                try {
                    timestamp = new Timestamp(new SimpleDateFormat("MMM dd, yyyy HH:mm:ss").parse(timestampString).getTime());
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                // Format the amount to have two decimal places
                String formattedAmount = String.format("%.2f", amount);

                // Format the timestamp to remove fractional seconds
                String formattedTimestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(timestamp);

                Object[] row = {
                    fromAccount,
                    toAccount,
                    formattedAmount,
                    currency,
                    formattedTimestamp
                };
                tableModel.addRow(row);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    //method to load exchange transaction data from the database
    public void loadExchangeData() {
        String url = "jdbc:mysql://127.0.0.1:3306/Egringotts";
        String user = "root";
        String password = "password";

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Establishing the connection
            connection = DriverManager.getConnection(url, user, password);
            statement = connection.createStatement();

            // Query to retrieve exchange data
            String query = "SELECT et.userId, et.amount, et.sourceCurrency, et.processingFee, et.amountConverted, et.targetCurrency, et.timestamp, "
                    + "(SELECT a.username FROM account a WHERE a.userid = et.userId) AS username "
                    + "FROM exchangetransaction et ORDER BY STR_TO_DATE(et.timestamp, '%M %e, %Y %H:%i:%s') DESC";
            resultSet = statement.executeQuery(query);

            // Creating the table model for the exchange data table
            DefaultTableModel exchangeTableModel = (DefaultTableModel) rstable_exchange.getModel();

            // Clearing any existing rows in the model
            exchangeTableModel.setRowCount(0);

            // Populating the table model with exchange data
            while (resultSet.next()) {
                String userId = resultSet.getString("userId");
                String amountString = resultSet.getString("amount");
                String sourceCurrency = resultSet.getString("sourceCurrency");
                double processingFee = resultSet.getDouble("processingFee");
                String amountConvertedString = resultSet.getString("amountConverted");
                String targetCurrency = resultSet.getString("targetCurrency");
                String timestampString = resultSet.getString("timestamp");
                String username = resultSet.getString("username");

                // Convert the timestamp string to java.sql.Timestamp
                Timestamp timestamp = null;
                try {
                    timestamp = new Timestamp(new SimpleDateFormat("MMM dd, yyyy HH:mm:ss").parse(timestampString).getTime());
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                // Split the amount and amount converted strings
                String[] amountParts = amountString.split(" ");
                String[] amountConvertedParts = amountConvertedString.split(" ");

                // Format the amounts to have two decimal places
                String formattedAmount = String.format("%.2f", Double.parseDouble(amountParts[0]));
                String formattedAmountConverted = String.format("%.2f", Double.parseDouble(amountConvertedParts[0]));

                SimpleDateFormat timestampFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String formattedTimestamp = timestampFormat.format(timestamp);

                Object[] row = {
                    username,
                    formattedAmount + " " + sourceCurrency,
                    formattedAmountConverted + " " + targetCurrency,
                    processingFee + " " + sourceCurrency,
                    formattedTimestamp
                };
                exchangeTableModel.addRow(row);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Method to load transaction data for the selected date from the database.
     *
     * @param selectedDate The selected date.
     */
    public void loadTransactionDataForSelectedDate(Date selectedDate) {
        String url = "jdbc:mysql://127.0.0.1:3306/Egringotts";
        String user = "root";
        String password = "password";

        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String formattedDate = dateFormat.format(selectedDate);

            // Query to retrieve transaction data for the selected date
            String transactionQuery = "SELECT t.fromaccount, t.toaccount, t.amount, t.currency, t.timestamp, "
                    + "(SELECT a.username FROM account a WHERE a.userid = t.fromaccount) AS fromUsername, "
                    + "(SELECT a.username FROM account a WHERE a.userid = t.toaccount) AS toUsername "
                    + "FROM transfertransaction t "
                    + "ORDER BY STR_TO_DATE(t.timestamp, '%Y-%m-%d %H:%i:%s') DESC";

            try (PreparedStatement transactionStatement = connection.prepareStatement(transactionQuery)) {
                try (ResultSet resultSetTransaction = transactionStatement.executeQuery()) {
                    DefaultTableModel transactionTableModel = (DefaultTableModel) rstable_transaction.getModel();
                    transactionTableModel.setRowCount(0);

                    while (resultSetTransaction.next()) {
                        String timestampString = resultSetTransaction.getString("timestamp");
                        SimpleDateFormat timestampFormat = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss");
                        Date timestampDate = timestampFormat.parse(timestampString);
                        String timestampDateFormatted = dateFormat.format(timestampDate);
                        if (timestampDateFormatted.equals(formattedDate)) {
                            // Date part of timestamp matches the selected date
                            String fromAccount = resultSetTransaction.getString("fromUsername");
                            String toAccount = resultSetTransaction.getString("toUsername");
                            double amount = resultSetTransaction.getDouble("amount");
                            String currency = resultSetTransaction.getString("currency");
                            Timestamp timestamp = new Timestamp(timestampDate.getTime());
                            String formattedAmount = String.format("%.2f", amount);
                            String formattedTimestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(timestamp);
                            Object[] row = {fromAccount, toAccount, formattedAmount, currency, formattedTimestamp};
                            transactionTableModel.addRow(row);
                        }
                    }
                }
            }

            // Query to retrieve exchange data for the selected date
            String exchangeQuery = "SELECT et.userId, et.amount, et.sourceCurrency, et.processingFee, et.amountConverted, et.targetCurrency, et.timestamp, "
                    + "(SELECT a.username FROM account a WHERE a.userid = et.userId) AS username "
                    + "FROM exchangetransaction et "
                    + "ORDER BY STR_TO_DATE(et.timestamp, '%Y-%m-%d %H:%i:%s') DESC";

            try (PreparedStatement exchangeStatement = connection.prepareStatement(exchangeQuery)) {
                try (ResultSet resultSetExchange = exchangeStatement.executeQuery()) {
                    DefaultTableModel exchangeTableModel = (DefaultTableModel) rstable_exchange.getModel();
                    exchangeTableModel.setRowCount(0);

                    while (resultSetExchange.next()) {
                        String timestampString = resultSetExchange.getString("timestamp");
                        SimpleDateFormat timestampFormat = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss");
                        Date timestampDate = timestampFormat.parse(timestampString);
                        String timestampDateFormatted = dateFormat.format(timestampDate);
                        if (timestampDateFormatted.equals(formattedDate)) {
                            // Date part of timestamp matches the selected date
                            String userId = resultSetExchange.getString("userId");
                            String amountString = resultSetExchange.getString("amount");
                            String sourceCurrency = resultSetExchange.getString("sourceCurrency");
                            double processingFee = resultSetExchange.getDouble("processingFee");
                            String amountConvertedString = resultSetExchange.getString("amountConverted");
                            String targetCurrency = resultSetExchange.getString("targetCurrency");
                            String username = resultSetExchange.getString("username");
                            Timestamp timestamp = new Timestamp(timestampDate.getTime());
                            String formattedAmount = String.format("%.2f", Double.parseDouble(amountString.split(" ")[0]));
                            String formattedAmountConverted = String.format("%.2f", Double.parseDouble(amountConvertedString.split(" ")[0]));
                            SimpleDateFormat timestampFormatted = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String formattedTimestamp = timestampFormatted.format(timestamp);
                            Object[] row = {username, formattedAmount + " " + sourceCurrency, formattedAmountConverted + " " + targetCurrency, processingFee + " " + sourceCurrency, formattedTimestamp};
                            exchangeTableModel.addRow(row);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Displays the total number of transactions.
     *
     * @param lbl_noftransaction The label to display the number of transactions.
     */
    private static void displayNumberOfTransaction(JLabel lbl_noftransaction) {
        String url = "jdbc:mysql://127.0.0.1:3306/Egringotts";
        String user = "root";
        String password = "password";
        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            int totalTransactions = getTotalTransactionCount(connection);
            int totalExchangeTransactions = getTotalExchangeTransactionCount(connection);
            int total = totalTransactions + totalExchangeTransactions;
            lbl_noftransaction.setText(Integer.toString(total));
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Retrieves the total number of transactions from the database.
     *
     * @param connection The database connection.
     * @return The total number of transactions.
     * @throws SQLException If a database access error occurs.
     */
    private static int getTotalTransactionCount(Connection connection) throws SQLException {
        try (Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT COUNT(*) FROM transfertransaction")) {
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        }
        return 0;
    }

    /**
     * Retrieves the total number of exchange transactions from the database.
     *
     * @param connection The database connection.
     * @return The total number of exchange transactions.
     * @throws SQLException If a database access error occurs.
     */
    private static int getTotalExchangeTransactionCount(Connection connection) throws SQLException {
        try (Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT COUNT(*) FROM exchangetransaction")) {
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        }
        return 0;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionPerDay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionPerDay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionPerDay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionPerDay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransactionPerDay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_displayall;
    private javax.swing.JButton btn_displaydaily;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel_choose;
    private javax.swing.JLabel lbl_noftransaction;
    private javax.swing.JLabel lbl_totaltransaction;
    private rojeru_san.complementos.RSTableMetro rstable_exchange;
    private rojeru_san.complementos.RSTableMetro rstable_transaction;
    private javax.swing.JPanel showexchangetransaction;
    private javax.swing.JPanel showtransactionhistory;
    private javax.swing.JScrollPane table_transaction;
    private javax.swing.JScrollPane table_transaction1;
    private javax.swing.JTabbedPane transactionhistoryPanel;
    // End of variables declaration//GEN-END:variables
}
