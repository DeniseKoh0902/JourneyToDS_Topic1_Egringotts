/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Admin;

import Bank.Account;
import Bank.Wand;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * Represents the JFrame for admin to manage currency details
 */
public class CurrencyManagement extends javax.swing.JFrame {

    private Account user;
    
    // Variables to hold currency details
    private String currencyName, rateToGalleon, processingFeeRate;
    private int currencyID; // Unique identifier for the currency
    public int numOfCurrency = 0; // Counter for the number of currencies
    DefaultTableModel model; // Table model to manage currency data
    Connection connection = null;
    Statement statement = null;

    /**
     * Creates new form ModifyCurrencyPage
     */
    public CurrencyManagement() {
        initComponents();
        displayCurrency();
        txt_currencyID.setEditable(false);
    }

    public CurrencyManagement(Account user) {
        setTitle("Currency Management Page");
        this.user = user;
        initComponents();
        Wand.setCustomIcon(this);
        Wand.setCustomCursor(this);
        displayCurrency();
        txt_currencyID.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Details = new javax.swing.JPanel();
        btn_add = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_remove = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_currencyID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txt_excRate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_processRate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btn_clearfield = new javax.swing.JButton();
        txt_currencyName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_currency = new rojeru_san.complementos.RSTableMetro();
        lbl_totalNum = new javax.swing.JLabel();
        lbl_totalNum1 = new javax.swing.JLabel();
        top1 = new javax.swing.JPanel();
        logo2 = new javax.swing.JLabel();
        Back = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        backgrouund = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1080, 600));
        getContentPane().setLayout(null);

        Details.setBackground(new java.awt.Color(0, 0, 0, 150));
        Details.setForeground(new java.awt.Color(255, 255, 255, 120));

        btn_add.setBackground(new java.awt.Color(255, 255, 204));
        btn_add.setFont(new java.awt.Font("Lucida Calligraphy", 0, 18)); // NOI18N
        btn_add.setForeground(new java.awt.Color(0, 0, 0));
        btn_add.setText("Add");
        btn_add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_add.setMaximumSize(new java.awt.Dimension(95, 35));
        btn_add.setMinimumSize(new java.awt.Dimension(95, 35));
        btn_add.setPreferredSize(new java.awt.Dimension(95, 35));
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(255, 255, 204));
        btn_edit.setFont(new java.awt.Font("Lucida Calligraphy", 0, 18)); // NOI18N
        btn_edit.setForeground(new java.awt.Color(0, 0, 0));
        btn_edit.setText("Edit");
        btn_edit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_edit.setMaximumSize(new java.awt.Dimension(95, 35));
        btn_edit.setMinimumSize(new java.awt.Dimension(95, 35));
        btn_edit.setPreferredSize(new java.awt.Dimension(95, 35));
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_remove.setBackground(new java.awt.Color(255, 255, 204));
        btn_remove.setFont(new java.awt.Font("Lucida Calligraphy", 0, 18)); // NOI18N
        btn_remove.setForeground(new java.awt.Color(0, 0, 0));
        btn_remove.setText("Delete");
        btn_remove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Calligraphy", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Currency Name :");

        txt_currencyID.setFont(new java.awt.Font("Segoe Print", 0, 16)); // NOI18N
        txt_currencyID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_currencyID.setText("(Generated by system)");
        txt_currencyID.setMinimumSize(new java.awt.Dimension(5, 34));
        txt_currencyID.setPreferredSize(new java.awt.Dimension(5, 34));

        jLabel9.setFont(new java.awt.Font("Lucida Calligraphy", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Exchange Rate To Galleon :");

        txt_excRate.setFont(new java.awt.Font("Segoe Print", 0, 16)); // NOI18N
        txt_excRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_excRate.setMinimumSize(new java.awt.Dimension(5, 34));
        txt_excRate.setPreferredSize(new java.awt.Dimension(5, 34));

        jLabel6.setFont(new java.awt.Font("Lucida Calligraphy", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Processing Fee Rate to Charge :");

        txt_processRate.setFont(new java.awt.Font("Segoe Print", 0, 16)); // NOI18N
        txt_processRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_processRate.setMinimumSize(new java.awt.Dimension(5, 34));
        txt_processRate.setPreferredSize(new java.awt.Dimension(5, 34));

        jLabel3.setFont(new java.awt.Font("Lucida Calligraphy", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Currency Details");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(356, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );

        jLabel7.setFont(new java.awt.Font("Lucida Calligraphy", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Currency ID :");

        btn_clearfield.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        btn_clearfield.setText("Clear field");
        btn_clearfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearfieldActionPerformed(evt);
            }
        });

        txt_currencyName.setFont(new java.awt.Font("Segoe Print", 0, 16)); // NOI18N
        txt_currencyName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_currencyName.setMinimumSize(new java.awt.Dimension(5, 34));
        txt_currencyName.setPreferredSize(new java.awt.Dimension(5, 34));

        javax.swing.GroupLayout DetailsLayout = new javax.swing.GroupLayout(Details);
        Details.setLayout(DetailsLayout);
        DetailsLayout.setHorizontalGroup(
            DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DetailsLayout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                        .addGroup(DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(DetailsLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99))
                            .addGroup(DetailsLayout.createSequentialGroup()
                                .addGroup(DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_excRate, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_processRate, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_currencyID, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_currencyName, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31))
                            .addGroup(DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                                    .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(26, 26, 26)
                                    .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btn_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                        .addComponent(btn_clearfield)
                        .addGap(140, 140, 140))))
        );
        DetailsLayout.setVerticalGroup(
            DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_currencyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_currencyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_excRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_processRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_remove)
                    .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_clearfield)
                .addContainerGap())
        );

        getContentPane().add(Details);
        Details.setBounds(610, 110, 430, 440);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0, 120));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Lucida Calligraphy", 1, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Available Magical Currencies");

        jTextField2.setText("jTextField1");

        table_currency.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cur.ID", "Currency Name", "Exchange Rate", "Processing Fee"
            }
        ));
        table_currency.setColorBackgoundHead(new java.awt.Color(102, 51, 0));
        table_currency.setColorBordeFilas(new java.awt.Color(153, 51, 0));
        table_currency.setColorBordeHead(new java.awt.Color(255, 255, 255));
        table_currency.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        table_currency.setColorFilasForeground1(new java.awt.Color(153, 0, 0));
        table_currency.setColorFilasForeground2(new java.awt.Color(153, 0, 0));
        table_currency.setColorSelBackgound(new java.awt.Color(255, 255, 204));
        table_currency.setColorSelForeground(new java.awt.Color(153, 0, 0));
        table_currency.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        table_currency.setFuenteFilas(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        table_currency.setFuenteFilasSelect(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        table_currency.setFuenteHead(new java.awt.Font("Lucida Handwriting", 1, 14)); // NOI18N
        table_currency.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table_currency.setRowHeight(30);
        table_currency.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_currencyMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_currency);
        if (table_currency.getColumnModel().getColumnCount() > 0) {
            table_currency.getColumnModel().getColumn(0).setMinWidth(3);
            table_currency.getColumnModel().getColumn(0).setPreferredWidth(3);
        }

        lbl_totalNum.setFont(new java.awt.Font("Lucida Calligraphy", 0, 16)); // NOI18N
        lbl_totalNum.setForeground(new java.awt.Color(255, 255, 255));
        lbl_totalNum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_totalNum.setText(" ");

        lbl_totalNum1.setFont(new java.awt.Font("Lucida Calligraphy", 0, 16)); // NOI18N
        lbl_totalNum1.setForeground(new java.awt.Color(255, 255, 255));
        lbl_totalNum1.setText("Total number of currency :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(293, 293, 293)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lbl_totalNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_totalNum, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_totalNum1)
                    .addComponent(lbl_totalNum))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(30, 110, 580, 440);

        top1.setBackground(new java.awt.Color(82, 68, 61));

        logo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo100x100.png"))); // NOI18N

        Back.setBackground(new java.awt.Color(101, 108, 120));
        Back.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        Back.setLabel("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Castellar", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Currency Management PORTAL");

        javax.swing.GroupLayout top1Layout = new javax.swing.GroupLayout(top1);
        top1.setLayout(top1Layout);
        top1Layout.setHorizontalGroup(
            top1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(top1Layout.createSequentialGroup()
                .addComponent(logo2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        top1Layout.setVerticalGroup(
            top1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, top1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, top1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(top1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        getContentPane().add(top1);
        top1.setBounds(0, 0, 1070, 100);

        backgrouund.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/curManage.jpg"))); // NOI18N
        backgrouund.setText("jLabel1");
        getContentPane().add(backgrouund);
        backgrouund.setBounds(0, 0, 1070, 600);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Close this page
    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        AdminProfile adminProfile = new AdminProfile(user);
        adminProfile.setUser();
        adminProfile.setUserType("Goblin");
        adminProfile.setVisible(true);
        adminProfile.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_BackActionPerformed

    //Method to add a new currency
    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // Retrieve data from text fields
        this.currencyName = txt_currencyName.getText();
        this.rateToGalleon = txt_excRate.getText();
        this.processingFeeRate = txt_processRate.getText();

        if (currencyName.isEmpty() || rateToGalleon.isEmpty() || processingFeeRate.isEmpty()) {
            JOptionPane.showMessageDialog(new JFrame(), "All the details must be filled!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Regular expression to match a number with optional decimal point
            String numberRegex = "^\\d+(\\.\\d{1,4})?$";

            // Validate exchange rate
            if (!rateToGalleon.matches(numberRegex)) {
                JOptionPane.showMessageDialog(new JFrame(), "Exchange rate must be a valid number with maximum one decimal point.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate processing fee rate
            if (!processingFeeRate.matches(numberRegex)) {
                JOptionPane.showMessageDialog(new JFrame(), "Processing fee rate must be a valid number with maximum one decimal point.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Ask for confirmation before adding the currency
            int dialogResult = JOptionPane.showConfirmDialog(null, "Please make sure the currency name\" " + currencyName + " \" is correct before proceed.", "Double check!", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
                    statement = connection.createStatement();

                    // Check for existing currency
                    String query1 = "SELECT * FROM Currency WHERE CurrencyName = '" + currencyName + "'";
                    ResultSet resultSetCurrency = statement.executeQuery(query1);
                    if (resultSetCurrency.next()) {
                        JOptionPane.showMessageDialog(new JFrame(), "This currency is already exists!", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        // Add new currency to currency table in database
                        String query = "INSERT INTO Currency(CurrencyName, RateToGalleon, ProcessingFeeRate) VALUES (?,?,?)";
                        try (PreparedStatement pst = connection.prepareStatement(query)) {
                            pst.setString(1, currencyName);
                            pst.setString(2, rateToGalleon);
                            pst.setString(3, processingFeeRate);

                            int rowCount = pst.executeUpdate();
                            if (rowCount > 0) {
                                JOptionPane.showMessageDialog(null, "Currency added successfully!");
                                // Clear text fields and refresh table
                                clearTextFields();
                                clearTable();
                                displayCurrency();

                                //add a new currency column in userbalance table
                                statement.executeUpdate("ALTER TABLE userbalance ADD COLUMN " + currencyName + " DECIMAL(20, 2) DEFAULT 0.00");
                                System.out.println("Currency added successfully.");

                            } else {
                                JOptionPane.showMessageDialog(new JFrame(), "Failed to add new currency!", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (SQLException e) {
                            System.out.println("Error: " + e.getMessage());
                            e.printStackTrace();
                        }

                        // Retrieve the total row count
                        ResultSet rs1 = statement.executeQuery("SELECT COUNT(*) AS total_rows FROM Currency");
                        if (rs1.next()) {
                            int totalRows = rs1.getInt("total_rows");
                            lbl_totalNum.setText(String.valueOf(totalRows));
                        }
                    }

                } catch (Exception e) {
                    // Handle generic exception
                    System.out.println("Error!" + e.getMessage());
                } finally {
                    try {
                        if (statement != null) {
                            statement.close();
                        }
                        if (connection != null) {
                            connection.close();
                        }
                    } catch (SQLException e) {
                        System.out.println("Error closing resources: " + e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_btn_addActionPerformed

    //Method to remove selected currency
    private void btn_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removeActionPerformed
        this.currencyID = Integer.parseInt(txt_currencyID.getText());
        this.currencyName = txt_currencyName.getText();
        this.rateToGalleon = txt_excRate.getText();
        this.processingFeeRate = txt_processRate.getText();
        
        // Check if any row is selected
        if (table_currency.getSelectedRow() == -1) {
            // If no row is selected, display a JOptionPane to remind the user
            JOptionPane.showMessageDialog(this, "Please select a currency to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        } else {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected currency?", "Banish obsolete currency?", JOptionPane.YES_NO_OPTION);
            // delete selected currency to currency table in database
            if (dialogResult == JOptionPane.YES_OPTION) {
                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
                    statement = connection.createStatement();
                    String query1 = "DELETE FROM Currency WHERE CurrencyID = ?";
                    try (PreparedStatement pst = connection.prepareStatement(query1)) {
                        pst.setInt(1, currencyID);

                        int rowCount = pst.executeUpdate();
                        if (rowCount > 0) {
                            JOptionPane.showMessageDialog(null, "Currency deleted successfully!");
                            clearTextFields();
                            clearTable();
                            displayCurrency();

                            //delete the particular currency column in userbalance table
                            statement.executeUpdate("ALTER TABLE userbalance DROP COLUMN " + currencyName);
                            System.out.println("Column deleted successfully.");

                        } else {
                            JOptionPane.showMessageDialog(new JFrame(), "Alas, the deletion spell has faltered.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        // Retrieve the total row count
                        ResultSet rs1 = statement.executeQuery("SELECT COUNT(*) AS total_rows FROM Currency");
                        if (rs1.next()) {
                            int totalRows = rs1.getInt("total_rows");
                            lbl_totalNum.setText(String.valueOf(totalRows));
                        }

                    } catch (SQLException e) {
                        System.out.println("Error: " + e.getMessage());
                        e.printStackTrace();
                    }

                } catch (Exception e) {
                    System.out.println("Error!" + e.getMessage());
                } finally {
                    try {
                        if (statement != null) {
                            statement.close();
                        }
                        if (connection != null) {
                            connection.close();
                        }
                    } catch (SQLException e) {
                        System.out.println("Error closing resources: " + e.getMessage());
                    }
                }
            } else {
                // No action needed
            }
        }
    }//GEN-LAST:event_btn_removeActionPerformed

    //Method to edit selected currency's details
    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
         // Retrieve data from text fields
        this.currencyID = Integer.parseInt(txt_currencyID.getText());
        this.currencyName = txt_currencyName.getText();
        this.rateToGalleon = txt_excRate.getText();
        this.processingFeeRate = txt_processRate.getText();

        if (currencyName.isEmpty() || currencyName.isEmpty() || processingFeeRate.isEmpty()) {
            JOptionPane.showMessageDialog(new JFrame(), "All the details must be filled!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // update selected currency details to currency table in database
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                connection = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
                statement = connection.createStatement();

                String query1 = "UPDATE Currency SET CurrencyName = ?, RateToGalleon = ?, ProcessingFeeRate = ? WHERE CurrencyID = ?";
                try (PreparedStatement pst = connection.prepareStatement(query1)) {
                    pst.setString(1, currencyName);
                    pst.setString(2, rateToGalleon);
                    pst.setString(3, processingFeeRate);
                    pst.setInt(4, currencyID);

                    int rowCount = pst.executeUpdate();
                    if (rowCount > 0) {
                        JOptionPane.showMessageDialog(null, "Currency details updated successfully!");
                        clearTextFields();
                        clearTable();
                        displayCurrency();
                    } else {
                        JOptionPane.showMessageDialog(new JFrame(), "Alas, the update spell has faltered.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                    // Retrieve the total row count
                    ResultSet rs1 = statement.executeQuery("SELECT COUNT(*) AS total_rows FROM Currency");
                    if (rs1.next()) {
                        int totalRows = rs1.getInt("total_rows");
                        lbl_totalNum.setText(String.valueOf(totalRows));
                    }

                } catch (SQLException e) {
                    System.out.println("Error: " + e.getMessage());
                    e.printStackTrace();
                }

            } catch (Exception e) {
                System.out.println("Error!" + e.getMessage());
            } finally {
                try {
                    if (statement != null) {
                        statement.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    System.out.println("Error closing resources: " + e.getMessage());
                }
            }
        }

    }//GEN-LAST:event_btn_editActionPerformed

    private void table_currencyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_currencyMouseClicked
        int rowNo = table_currency.getSelectedRow();
        TableModel model = table_currency.getModel();
        txt_currencyID.setText(model.getValueAt(rowNo, 0).toString());
        txt_currencyName.setText(model.getValueAt(rowNo, 1).toString());
        txt_excRate.setText(model.getValueAt(rowNo, 2).toString());
        txt_processRate.setText(model.getValueAt(rowNo, 3).toString());
        txt_currencyName.setEditable(false);
    }//GEN-LAST:event_table_currencyMouseClicked

    private void btn_clearfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearfieldActionPerformed
        clearTextFields();
    }//GEN-LAST:event_btn_clearfieldActionPerformed

    public void displayCurrency() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Egringotts", "root", "password");
            Statement stm = con.createStatement();

            ResultSet rs = stm.executeQuery("SELECT * FROM Currency");
            while (rs.next()) {
                currencyID = rs.getInt("CurrencyID");
                currencyName = rs.getString("CurrencyName");
                rateToGalleon = rs.getString("RateToGalleon");
                processingFeeRate = rs.getString("ProcessingFeeRate");

                Object[] obj = {currencyID, currencyName, rateToGalleon, processingFeeRate};
                model = (DefaultTableModel) table_currency.getModel();
                model.addRow(obj);
            }

            // Retrieve the total row count
            ResultSet rs1 = stm.executeQuery("SELECT COUNT(*) AS total_rows FROM Currency");
            if (rs1.next()) {
                int totalRows = rs1.getInt("total_rows");
                lbl_totalNum.setText(String.valueOf(totalRows));
            }

            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) table_currency.getModel();
        model.setRowCount(0);
    }

    private void clearTextFields() {
        txt_currencyID.setText("(Generated by system)");
        txt_currencyName.setText("");
        txt_excRate.setText("");
        txt_processRate.setText("");
        txt_currencyName.setEditable(true);
    }

    //to update currrency details
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CurrencyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CurrencyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CurrencyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CurrencyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CurrencyManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Back;
    private javax.swing.JPanel Details;
    private javax.swing.JLabel backgrouund;
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_clearfield;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_remove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lbl_totalNum;
    private javax.swing.JLabel lbl_totalNum1;
    private javax.swing.JLabel logo2;
    private rojeru_san.complementos.RSTableMetro table_currency;
    private javax.swing.JPanel top1;
    private javax.swing.JTextField txt_currencyID;
    private javax.swing.JTextField txt_currencyName;
    private javax.swing.JTextField txt_excRate;
    private javax.swing.JTextField txt_processRate;
    // End of variables declaration//GEN-END:variables
}
